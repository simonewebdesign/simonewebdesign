<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Articles about JavaScript | Simone Web Design]]></title>
  <link href="https://www.simonewebdesign.it/categories/javascript/atom.xml" rel="self"/>
  <link href="https://www.simonewebdesign.it/"/>
  <updated>2021-06-11T20:24:10+01:00</updated>
  <id>https://www.simonewebdesign.it/</id>
  <author>
    <name><![CDATA[Simone Vittori]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[How to Install Global npm Packages on Heroku]]></title>
    <link href="https://www.simonewebdesign.it/how-to-install-global-npm-packages-on-heroku/"/>
    <updated>2021-05-29T00:00:00+01:00</updated>
    <id>https://www.simonewebdesign.it/how-to-install-global-npm-packages-on-heroku</id>
    <content type="html"><![CDATA[<p>If you need to install an <a href="https://www.npmjs.com/">npm</a> package <em>globally</em>, rather than <em>locally</em>, but don’t know how to do this on <a href="https://www.heroku.com/">Heroku</a>, you can follow this how-to guide.</p>

<!--more-->

<p>Before we start, a quick word of warning: it’s generally considered good practice to install your npm dependencies in the local <code class="language-plaintext highlighter-rouge">node_modules</code> folder, whenever possible. This means simply running <code class="language-plaintext highlighter-rouge">npm install</code> without the <code class="language-plaintext highlighter-rouge">--global</code> (<code class="language-plaintext highlighter-rouge">-g</code>) flag. However, sometimes this is not an option, for instance if you have a library or tool that expects a binary to be already present in the system, like in my case.</p>

<h1 id="the-problem">The problem</h1>

<p>Essentially, I had one problem: <strong>a Ruby gem that needed a Node.js package</strong> to be installed <strong>globally</strong>.</p>

<p>I had a <a href="https://jekyllrb.com/">Jekyll</a> blog use <a href="https://pugjs.org/">Pug</a> (Jade) for templating. Making Pug work locally was very easy using <a href="https://github.com/DougBeney/jekyll-pug">Jekyll-Pug</a>, a Jekyll plugin that enables Pug templates. However, when deploying on <a href="https://www.heroku.com/">Heroku</a>, the build would fail because of the missing Pug library.</p>

<p>The <a href="https://github.com/DougBeney/jekyll-pug">Jekyll-Pug</a> README is pretty clear:</p>

<blockquote>
  <p><strong>Note:</strong> you must have pug installed. To install it, simply enter the terminal command, <code class="language-plaintext highlighter-rouge">npm install pug -g</code>.</p>
</blockquote>

<p>Two issues here:</p>

<ol>
  <li>I was using <a href="https://github.com/heroku/heroku-buildpack-ruby">Heroku’s Ruby Buildpack</a>, but I also needed Node.js to be able to run <code class="language-plaintext highlighter-rouge">npm</code>;</li>
  <li>I wasn’t sure how to declare the global Node.js dependency.</li>
</ol>

<h1 id="the-solution">The solution</h1>

<p>Point #1 was pretty straightforward: I simply needed to add the <a href="https://elements.heroku.com/buildpacks/heroku/heroku-buildpack-nodejs">Heroku Buildpack for Node.js</a> alongside the Ruby one, essentially <a href="https://devcenter.heroku.com/articles/using-multiple-buildpacks-for-an-app">using two buildpacks instead of one</a>. You can do this by running:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>heroku buildpacks:add --index 1 heroku/nodejs
</code></pre></div></div>

<p>This will insert the Node.js buildpack <em>before</em> Ruby, so it will be executed first.</p>

<p>Point #2 was about installing Pug globally. The way I went to achieve this was by using package.json’s <a href="https://docs.npmjs.com/cli/v7/using-npm/scripts">scripts</a>. This is what my package.json looked like:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"npm install pug --global"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">npm install pug --global</code> command would run on Heroku when pushing and, thanks to the <a href="https://devcenter.heroku.com/articles/nodejs-support#multi-buildpack-behavior">multi-buildpack behaviour</a>, all Node.js-related binaries would be available in subsequent buildpacks as well.</p>

<p>So in my specific case, this meant that Jekyll could find the global Pug binary and compile the blog successfully. Problem solved!</p>

<h1 id="conclusion">Conclusion</h1>

<p>Whilst global dependencies are to avoid whenever possible, Heroku lets us run arbitrary commands and generate any build artifacts needed for our apps to function correctly. <a href="https://devcenter.heroku.com/articles/buildpacks">Buildpacks</a> are Heroku’s way of handling dependencies and compile code. They have a <a href="https://devcenter.heroku.com/articles/buildpacks#officially-supported-buildpacks">list of official buildpacks</a> for us to use, for free — and if you ever need to install a global dependency (or run any arbitrary command in Node.js, for that matter), you can do so using <a href="https://docs.npmjs.com/cli/v7/using-npm/scripts">scripts</a> in your package.json.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A pure CSS onclick context menu]]></title>
    <link href="https://www.simonewebdesign.it/pure-css-onclick-context-menu/"/>
    <updated>2019-05-13T00:00:00+01:00</updated>
    <id>https://www.simonewebdesign.it/pure-css-onclick-context-menu</id>
    <content type="html"><![CDATA[<p>
  Context menus are one of those very useful UI widgets that still haven't reached the HTML spec.
  <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contextmenu" rel="external">There have been attempts</a>,
  but for now everyone tends to make their own custom implementation.
</p>

<p>Especially with the advent of React, the tendency is to write a custom menu component that uses JavaScript to open/close itself, perhaps by using an invisible overlay to detect clicks outside the menu and close it accordingly. This works fine in practice, however it doesn't have to be so complicated. If you need a simple <strong>dropdown menu</strong> that:</p>

<ul>
<li>Has no dependencies;
<li>Can be triggered with a click/tap on any element;
<li>Is fully cross-browser;
<li>Doesn't need JavaScript!
&lt;/ul&gt;

<p>Then look no further. It's much simpler than you think!</p>

<!--more-->

<h2>An example</h2>

Try clicking this button: <button>☰</button><nav class="menu">
        <ul>
            <li>
                <button onclick="alert('Hello there!')">Display Greeting</button>
            </li>
            <li>
                <button onclick="print()">Print This Page</button>
            </li>
        </ul>
    </nav>

<p>This is done in <strong>pure HTML and CSS</strong>; the JavaScript is there just to add functionality. Source code below.</p>

<h3>The HTML</h3>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;button&gt;</span>☰<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">"menu"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ul&gt;</span>
    <span class="nt">&lt;li&gt;</span>
      <span class="nt">&lt;button</span> <span class="na">onclick=</span><span class="s">"alert('Hello there!')"</span><span class="nt">&gt;</span>
        Display Greeting
      <span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;</span>
      <span class="nt">&lt;button</span> <span class="na">onclick=</span><span class="s">"print()"</span><span class="nt">&gt;</span>
        Print This Page
      <span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/nav&gt;</span></code></pre></figure>

<h3>The CSS</h3>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="nc">.menu</span> <span class="p">{</span>
    <span class="nl">visibility</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">button</span> <span class="o">+</span> <span class="nc">.menu</span><span class="nd">:active</span><span class="o">,</span>
<span class="nt">button</span><span class="nd">:focus</span> <span class="o">+</span> <span class="nc">.menu</span> <span class="p">{</span>
    <span class="nl">visibility</span><span class="p">:</span> <span class="nb">visible</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>That's the trick: we hide the menu in CSS initially, then show it when the button gets focused <em>and</em> while we're clicking on the menu itself. This is necessary so that the click actually gets registered. That's it! <strong>No JS trickery involved.</strong></p>

<p>You can attach event listeners to the menu items, e.g. using <code>onclick</code> or <code>document.addEventListener</code> and they'll work as usual. You may also just use <code>&lt;a&gt;</code> tags instead of buttons, depending on your use case.&lt;/a&gt;</p>

<p>Naturally the menu can be opened only by elements that can receive focus, such as buttons and anchors. So what about other non-interactive elements? Can we make them focusable too? <strong>The answer is yes!</strong></p>

<h2>A more complicated example</h2>

<p>We want to <strong>display a context menu</strong> when clicking on the following image: <figure class="doge-demo" tabindex="-1">
  <picture class="doge">
    <source type="image/webp" srcset="/images/doge.webp" />
    <img src="/images/doge.png" loading="lazy" width="300" height="300" alt="doge meme" title="Click me to open the menu..." />
  </picture>
  <figcaption>wow, this image is clickable!</figcaption>
  <nav class="menu">
    <ul>
      <li>
        <button onclick="alert('Button clicked!')">Open Image in New Tab</button>
      </li>
      <li>
        <button onclick="console.log(1)">Save Image As...</button>
      </li>
      <li>
        <button>Copy Image Address</button>
      </li>
    </ul>
  </nav>
</figure>

<h3>The HTML</h3>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;figure</span> <span class="na">tabindex=</span><span class="s">"-1"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"/images/doge.png"</span> <span class="nt">/&gt;</span>

  <span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">"menu"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
      <span class="nt">&lt;li&gt;</span>
        <span class="nt">&lt;button&gt;</span>Open Image in New Tab<span class="nt">&lt;/button&gt;</span>
      <span class="nt">&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;</span>
        <span class="nt">&lt;button&gt;</span>Save Image As...<span class="nt">&lt;/button&gt;</span>
      <span class="nt">&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;</span>
        <span class="nt">&lt;button&gt;</span>Copy Image Address<span class="nt">&lt;/button&gt;</span>
      <span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;/nav&gt;</span>
<span class="nt">&lt;/figure&gt;</span></code></pre></figure>

<p>The trick here was to add <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex" rel="external"><code>tabindex</code></a>. This makes the element focusable, so that it can open the menu on click. Note that if the clickable element is a <code>&lt;button&gt;</code> or other <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#Interactive_content" rel="external">interactive content</a> (i.e. any focusable element), then you don't even need this!</p>

<p>I've used a <code>&lt;figure&gt;</code>, but you can use any element you like. Just add <code>tabindex="-1"</code> to make it focusable, if it isn't already. You can place the menu anywhere you want in the HTML, as long as you're able to target it with a CSS selector. Just try not to put a button in a button as that's invalid HTML, although technically it will still work.</p>

<h3>The CSS</h3>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="nc">.menu</span> <span class="p">{</span>
    <span class="nl">visibility</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">figure</span><span class="nd">:active</span> <span class="nc">.menu</span><span class="o">,</span>
<span class="nt">figure</span><span class="nd">:focus</span> <span class="nc">.menu</span> <span class="p">{</span>
    <span class="nl">visibility</span><span class="p">:</span> <span class="nb">visible</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<h3>How do I make the menu appear next to the mouse cursor?</h3>

<p>You'll need JavaScript, but it's entirely up to you whether you want to do this. Alternatively you could add <code>position: absolute</code> to the menu and <strong>just make it appear below (or next to) the element you clicked</strong> — no need for JS in this case! Anyway, this did the trick for me:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">const</span> <span class="nx">img</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">.doge</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">menu</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">.menu</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">img</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">mousedown</span><span class="dl">'</span><span class="p">,</span> <span class="p">({</span> <span class="nx">offsetX</span><span class="p">,</span> <span class="nx">offsetY</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">menu</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span> <span class="o">=</span> <span class="nx">offsetY</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">px</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">menu</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="nx">offsetX</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">px</span><span class="dl">'</span><span class="p">;</span>
<span class="p">});</span></code></pre></figure>

<h3>I want the menu to close when I click the button again!</h3>

<p>If that's the case, you'll probably be better off using the old <a href="https://css-tricks.com/the-checkbox-hack/" rel="external">checkbox hack</a>.</p>

<h3>A note about accessibility</h3>

<p>Accessibility isn't the main focus of this article, but an important topic nonetheless. Menu items <strong>should be navigatable with a keyboard</strong>: this requires JS, but it's not hard to achieve. The <abbr title="World Wide Web Consortium">W3C</abbr> has done a lot of work around accessibility and there's plenty of examples you can refer to on their site: for instance, I think the <a href="https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/menu-button/menu-button-links.html" rel="external">menu button example</a> is particularly relevant.</p>

<h3>What about browser support?</h3>

<p>It may not work in some very old browsers, so make sure to test it in the browsers you need to support. <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Clicking_and_focus" rel="external">This MDN page</a> has some info about what happens to the focus of a button when being clicked/tapped on different platforms. I did some tests myself and it seems to work well everywhere, including IE and mobile browsers.</p>

<p><b>Update:</b> this blog post received a lot of attention and a few folks reached out to me about an issue, specifically with Safari and Firefox, on both iOS and macOS: the button won't focus. No worries though, it only affects buttons; other tags will work just fine. You may consider using <code>&lt;span tabindex=0&gt;</code> — the semantic meaning is lost entirely here, so if you really want to use a button, you can always focus it programmatically via JS, but <em>only</em> on Apple devices — for example:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="k">if</span> <span class="p">(</span>
  <span class="sr">/apple/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nb">navigator</span><span class="p">.</span><span class="nx">vendor</span><span class="p">)</span> <span class="o">||</span>
  <span class="sr">/Mac.*Firefox/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nb">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">)</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">button</span><span class="dl">'</span><span class="p">);</span>

  <span class="nx">button</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="nx">event</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">}</span></code></pre></figure>

<p>Another issue you may find specific to Apple is that the menu won't close when tapping outside of it. There's an easy fix: simply add <code>tabindex="-1"</code> to the container or the body tag.</p>

<hr />

<p>And that's it! I hope you found this useful. If you spot any issues, please do let me know!</p>

<script>
const img = document.querySelector('.doge');
const menu = document.querySelector('.doge-demo .menu');

img.addEventListener('mousedown', function (event) {
    const { offsetX, offsetY } = event;
    menu.style.top = offsetY + 'px';
    menu.style.left = offsetX + 'px';
});

if (
    /apple/i.test(navigator.vendor) ||
    /Mac.*Firefox/.test(navigator.userAgent)
) {
    document.querySelector('h2 + button').addEventListener('click', function (event) {
        event.target.focus();
    });
}

</script>


<style>
.entry-content h2 code { background: rgba(0, 0, 0, 0.05); padding: 0.1rem 0.2rem; border-radius: 4px; }

.entry-content .doge-demo { position: relative; width: 306px; margin: 0 auto; outline: none; }

.entry-content .doge-demo:active .menu, .entry-content .doge-demo:focus .menu { visibility: visible; }

.entry-content .doge-demo img { margin-bottom: 0.5rem !important; border: 2px solid transparent; outline: 1px solid rgba(0, 0, 0, 0.5); cursor: pointer; }

.entry-content .doge-demo img:active, .entry-content .doge-demo img:focus { border: 2px solid green; }

.entry-content .doge-demo figcaption { text-align: center; background: rgba(0, 0, 0, 0.05); width: 306px; margin: 0 auto; margin-top: -11px; margin-left: -1px; font-size: 0.9rem; color: rgba(255, 255, 255, 0.96); background-color: rgba(0, 0, 0, 0.7); }

.entry-content .doge-demo .menu { position: absolute; top: 0; left: 0; min-width: 14rem; }

.entry-content .menu { visibility: hidden; background: white; border-radius: 4px; border: 1px solid #dedede; }

.entry-content .menu > ul { list-style: none; margin: 0.4rem 0; }

.entry-content .menu > ul > li { padding: 0; }

.entry-content .menu > ul > li > button { padding: 0.2rem 0.8rem; width: 100%; font-size: 1rem; -webkit-appearance: button; -moz-appearance: button; text-transform: none; font-family: inherit; font-size: 100%; line-height: 1.15; margin: 0; overflow: visible; border: 0; text-align: left; font-family: Arial, Verdana, sans-serif; outline: none; cursor: pointer; background: transparent; }

.entry-content .menu > ul > li > button:hover { background: rgba(0, 0, 0, 0.04); }

.entry-content .menu > ul > li > button:active, .entry-content .menu > ul > li > button:focus { background: rgba(0, 0, 0, 0.08); }

.entry-content button + .menu { display: inline-block; position: absolute; }

.entry-content button + .menu:active { visibility: visible; }

.entry-content button:focus + .menu { visibility: visible; }

</style>
</p></li></li></li></li></ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursive Reduce in JavaScript and Clojure]]></title>
    <link href="https://www.simonewebdesign.it/recursive-reduce-in-javascript-and-clojure/"/>
    <updated>2016-07-26T14:00:00+01:00</updated>
    <id>https://www.simonewebdesign.it/recursive-reduce-in-javascript-and-clojure</id>
    <content type="html"><![CDATA[<p>Another fun kata:</p>

<blockquote>
  <p>Given an array of arbitrarily nested objects, return a flat array with all the objects marked as “good”.</p>
</blockquote>

<p>The definition above is quite generic, so I’ll provide examples to show
exactly what I mean.</p>

<p>The array in JavaScript looks like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">items</span> <span class="o">=</span> <span class="p">[{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="na">good</span><span class="p">:</span> <span class="kc">true</span>
<span class="p">},</span> <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="na">children</span><span class="p">:</span> <span class="p">[{</span>
        <span class="na">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
        <span class="na">good</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">},</span> <span class="p">{</span>
        <span class="na">id</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
        <span class="na">good</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">},</span> <span class="p">{</span>
        <span class="na">id</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
        <span class="na">children</span><span class="p">:</span> <span class="p">[{</span>
                <span class="na">id</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
                <span class="na">good</span><span class="p">:</span> <span class="kc">true</span>
            <span class="p">}</span>
            <span class="p">...</span>
        <span class="p">]</span>
    <span class="p">},</span> <span class="p">{</span>
        <span class="na">id</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span>
        <span class="na">children</span><span class="p">:</span> <span class="p">[...]</span>
    <span class="p">},</span> <span class="p">...]</span>
<span class="p">},</span> <span class="p">...]</span>
</code></pre></div></div>

<p>We want the IDs of the good ones.</p>

<p>You might have noticed not all objects are “good”. Number 2 for example
is not good. So the result in this case should be:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</code></pre></div></div>

<p>The only thing to notice here is that <strong>you know it’s not good because
it’s not marked as such.</strong> In other words, when some object is “bad”,
there’s no <code class="language-plaintext highlighter-rouge">good: false</code> nor <code class="language-plaintext highlighter-rouge">bad: true</code> that tells you that.</p>

<p>So how do we solve this challenge?</p>

<p>Since there’s an arbitrary nesting depth, we can once again leverage the
power and simplicity of recursion.</p>

<h2 id="solution-in-javascript">Solution in JavaScript</h2>

<p>I’ve created the function <code class="language-plaintext highlighter-rouge">goodOnes(items)</code> that takes the input and
returns what we expect. I’m also using <a href="https://github.com/ramda/ramda">Ramda.js</a>, just because I wanted a clean functional solution and I didn’t want to mess around
object mutation.</p>

<p>Here it is:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">goodOnes</span><span class="p">(</span><span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">R</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">theGoodOne</span><span class="p">,</span> <span class="p">[],</span> <span class="nx">items</span><span class="p">);</span>

  <span class="kd">function</span> <span class="nx">theGoodOne</span><span class="p">(</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">good</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">acc</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">children</span> <span class="o">&amp;&amp;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">R</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">theGoodOne</span><span class="p">,</span> <span class="nx">acc</span><span class="p">,</span> <span class="nx">item</span><span class="p">.</span><span class="nx">children</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">acc</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>As a side note, you don’t really have to use Ramda.js.
<code class="language-plaintext highlighter-rouge">Array.prototype.reduce</code> does the same, although in a less elegant way.</p>

<h3 id="explanation">Explanation</h3>

<p>What this function does is basically just <strong>collecting values</strong>. The
starting point is an empty array, you can see that as the second
argument in the first line. <code class="language-plaintext highlighter-rouge">theGoodOne</code> is another function (a closure,
to be specific) that is implicitly taking two arguments: <code class="language-plaintext highlighter-rouge">acc</code> (the
<em>accumulator</em>, the empty array) and <code class="language-plaintext highlighter-rouge">item</code> (the current item in the loop).</p>

<p>If the item is good, we return a <strong>new array</strong> with the item’s ID.
Otherwise, we return the accumulator. However, if the item happens to
have some children, we start over doing the same thing (i.e. looping
over its children), also keeping track of the accumulator we already
have this time. It might be still empty, but we don’t care yet. We just
return it at the very end.</p>

<p>Now, you might have noticed a bug: what happens if the item is good, but also
has children? … Yes, that item will be discarded! I did it on purpose
by the way. When I made this function, the original array of items never
had any good item <em>with</em> children. Only good items, or items with children.
The algorithm is reflecting this, so it’s technically not a bug.</p>

<p>If you’re curious about what’s the original intent behind this function, it is to
collect values from an <strong>infinitely nestable architecture of UI components</strong>.
There are <em>text</em> components, <em>number</em> components, <em>datepickers</em> etc…
those are all part of a category called <em>fields</em>. There are also
<em>wrappers</em>, that could be for example a <em>fieldset</em> or a <em>grid</em>. Wrappers can
contain fields, but also other wrappers.</p>

<p>So what if you have such data structure with so many components and all
you need is just an array of fields? Simple, just <strong>reduce recursively</strong>
on it! ;)</p>

<p>More in general, you can use the <strong>recursive reduce</strong> whenever you have
a nested data structure (such as an array of arrays) and you want to get something out of it.</p>

<h2 id="solution-in-clojure">Solution in Clojure</h2>

<p>This <strong>recursive solution</strong> follows the same logic as the JavaScript
one, but somehow it feels superior. It could probably be rewritten in a
more elegant way I guess, but I’m not very experienced with Clojure so
here we go:</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">defn</span><span class="w"> </span><span class="n">good-one</span><span class="w"> </span><span class="p">[</span><span class="n">acc</span><span class="w"> </span><span class="n">item</span><span class="p">]</span><span class="w">
  </span><span class="p">(</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="nf">item</span><span class="w"> </span><span class="no">:good</span><span class="p">)</span><span class="w">
    </span><span class="p">(</span><span class="nb">conj</span><span class="w"> </span><span class="n">acc</span><span class="w"> </span><span class="p">(</span><span class="nf">item</span><span class="w"> </span><span class="no">:id</span><span class="p">))</span><span class="w">
    </span><span class="p">(</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="nb">seq</span><span class="w"> </span><span class="p">(</span><span class="nf">item</span><span class="w"> </span><span class="no">:children</span><span class="p">))</span><span class="w">
      </span><span class="p">(</span><span class="nb">reduce</span><span class="w"> </span><span class="n">good-one</span><span class="w"> </span><span class="n">acc</span><span class="w"> </span><span class="p">(</span><span class="nf">item</span><span class="w"> </span><span class="no">:children</span><span class="p">))</span><span class="w">
      </span><span class="n">acc</span><span class="p">)))</span><span class="w">

</span><span class="p">(</span><span class="k">defn</span><span class="w"> </span><span class="n">good-ones</span><span class="w"> </span><span class="p">[</span><span class="n">collection</span><span class="p">]</span><span class="w">
  </span><span class="p">(</span><span class="nb">reduce</span><span class="w"> </span><span class="n">good-one</span><span class="w"> </span><span class="p">[]</span><span class="w"> </span><span class="n">collection</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<h2 id="demo--download">Demo &amp; Download</h2>

<p>Everything is on GitHub if you want to fiddle around – just follow the instructions to get the demos up and running on your computer.</p>

<ul>
  <li>JavaScript <a href="https://github.com/simonewebdesign/es2015-recursive-reduce/blob/master/main.js">GitHub source</a> - <a href="https://github.com/simonewebdesign/es2015-recursive-reduce#readme">Readme instructions</a></li>
  <li>Clojure <a href="https://github.com/simonewebdesign/clojure-recursive-reduce/blob/master/test/clojure_recursive_reduce/core_test.clj">GitHub source</a> - <a href="https://github.com/simonewebdesign/clojure-recursive-reduce#readme">Readme instructions</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Get Environment Variables in the Browser]]></title>
    <link href="https://www.simonewebdesign.it/how-to-get-environment-variables-in-the-browser/"/>
    <updated>2015-08-03T12:00:00+01:00</updated>
    <id>https://www.simonewebdesign.it/how-to-get-environment-variables-in-the-browser</id>
    <content type="html"><![CDATA[<h2 id="preface-why">Preface: Why?</h2>

<p><strong>Environment variables</strong> are very useful for <strong>configuring your app</strong> depending on the environment, without having to hardcode any value in the source.</p>

<p>At my current company we are building a <strong>microservice infrastructure</strong>, where the <strong>frontend</strong> and the <strong>backend</strong> are completely decoupled applications. We also use <a href="https://docker.com/">Docker</a> to manage these microservices and link them together. Turns out that storing the configuration in the environment—as opposed to storing it in the database or in the code itself—is quite valuable, as described also in the <a href="http://12factor.net/config">twelve-factor</a> methodology.</p>

<h3 id="advantages">Advantages:</h3>

<ul>
  <li>Language and OS agnostic;</li>
  <li>Easy to change between deploys without changing any code;</li>
  <li>Impossible to accidentally check in source control.</li>
</ul>

<h2 id="how">How?</h2>

<p>A web page doesn’t have access to OS variables, so you can’t normally use them.</p>

<p>The solution is pretty simple: you just need to <strong>generate a file that contains them</strong>.</p>

<p>For such a trivial task you could be tempted to use your language of choice, e.g. in JavaScript (Node.js) you have access to <code class="language-plaintext highlighter-rouge">process.env.SOME_VAR</code>. In Python you would probably do <code class="language-plaintext highlighter-rouge">os.getenv('SOME_VAR')</code> and in Ruby you’d use <code class="language-plaintext highlighter-rouge">ENV['SOME_VAR']</code>—but what about some old-school shell scripting? The script could be as simple as:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># bin/env.sh</span>
<span class="nb">echo</span> <span class="s2">"env = {"</span>
<span class="nb">echo</span> <span class="s2">"  USER: '</span><span class="nv">$USER</span><span class="s2">',"</span>
<span class="nb">echo</span> <span class="s2">"  HOSTNAME: '</span><span class="nv">$HOSTNAME</span><span class="s2">'"</span>
<span class="nb">echo</span> <span class="s2">"}"</span>
</code></pre></div></div>

<p>That, when executed, will become:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// env.js</span>
<span class="nx">env</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">USER</span><span class="p">:</span> <span class="dl">'</span><span class="s1">yourname</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">HOSTNAME</span><span class="p">:</span> <span class="dl">'</span><span class="s1">ubuntu</span><span class="dl">'</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And the script to execute on the shell is:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./bin/env.sh <span class="o">&gt;</span> env.js
</code></pre></div></div>

<p>Pretty straightforward, isn’t it?</p>

<h3 id="test-it">Test it:</h3>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
  ...
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"env.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;script&gt;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">env</span><span class="p">.</span><span class="nx">USER</span><span class="p">,</span> <span class="nx">env</span><span class="p">.</span><span class="nx">HOSTNAME</span><span class="p">);</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>One downside to this approach is that you have to “make a build” every time you change the variables. If you know any workarounds or better solutions, please let me know!</p>

<h3 id="source-and-download">Source and download</h3>

<p>Find the source code on <a href="https://github.com/simonewebdesign/frontend-env-vars">GitHub</a>. Download the zip file <a href="https://github.com/simonewebdesign/frontend-env-vars/archive/master.zip">here</a>.</p>

<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making a game from scratch in HTML5]]></title>
    <link href="https://www.simonewebdesign.it/making-a-game-from-scratch-in-html5/"/>
    <updated>2014-12-01T16:06:53+00:00</updated>
    <id>https://www.simonewebdesign.it/making-a-game-from-scratch-in-html5</id>
    <content type="html"><![CDATA[<blockquote>
  <p>“Pong is one of the earliest arcade video games; it is a tennis sports game featuring simple two-dimensional graphics.” - Wikipedia</p>
</blockquote>

<p>Have you ever dreamed of building a game in JavaScript? I did, and I also managed to make my first one. Of course I also wrote some tips and gotchas to help you complete this nice challenge.</p>

<h2 id="how-to-make-pong-in-html5-canvas">How to make Pong in HTML5 canvas</h2>

<p>Pong, at it’s core, is an extremely simple game. That’s why it’s a good one to begin with if you have just started learning game design basics. Of course you could start with <a href="//www.gamefromscratch.com/post/2013/08/01/Just-starting-out-what-games-should-I-make.aspx" rel="external">many other games</a>, but if you are looking for something relatively simple to build, Pong really is one of the simplest games ever made.</p>

<p><abbr title="As far as I know">AFAIK</abbr>, there are at least two ways of doing it: I personally call them the <em>“simple way”</em> and the <em>“hard way”</em>. I did both, but first let’s explore the simple one.</p>

<h3 id="project-structure">Project structure</h3>

<p>I aimed to make it as simple as possible, so I just created one HTML file that is referencing few JavaScript files. You may ask, why not a whole single file? Because it’s usually preferable to have many little files rather than one massive plate of spaghetti code. So here’s served the project’s structure:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>index.html
canvas.js
game.js
keyboard.js
main.js
render.js
reset.js
update.js
</code></pre></div></div>

<p><strong>index.html</strong> is our single entry point to the game.</p>

<p><strong>canvas.js</strong> contains the code for initializing the <code class="language-plaintext highlighter-rouge">canvas</code> <abbr title="Document Object Model">DOM</abbr> object and the 2D context.</p>

<p><strong>game.js</strong> contains the game objects. This file will be executed only once at the beginning, when the game loads.</p>

<p><strong>keyboard.js</strong> has the keyboard bindings.</p>

<p><strong>main.js</strong> is perhaps the most important file, because it contains the main game loop.</p>

<p><strong>render.js</strong> does… the rendering. (you don’t say?)</p>

<p><strong>reset.js</strong> is for resetting the game to the initial state, called every time a player wins.</p>

<p><strong>update.js</strong> contains 90% of the game logic, and obviously is for updating the game state (before rendering).</p>

<h3 id="the-main-loop">The main loop</h3>

<p>The main loop is at the core of our game. Maybe it’s hard to believe, but virtually every single videogame in the world lives and dies <a href="//designoidgames.com/2013/01/game-programming-basics-time/" rel="external">within a loop</a>.</p>

<p>Implementing a game loop is a lot simpler than you think, but it’s not the focus of this tutorial. The resource I highly recommend for getting started is <a href="http://www.lostdecadegames.com/how-to-make-a-simple-html5-canvas-game/">How to make a simple HTML5 Canvas game</a>, by Matt Hackett. All my work is actually based on his tutorial. Read it, and you’ll get a basic understanding of the fundamentals of game development.</p>

<p>We want to focus on the game logic now, so for the time being let’s pretend our game loop looks like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">update</span><span class="p">();</span> <span class="c1">// update game objects</span>
  <span class="nx">render</span><span class="p">();</span> <span class="c1">// render game objects</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Got it? :-)</p>

<h3 id="ball-movement">Ball movement</h3>

<p>How do we make the ball moving across the screen? In JavaScript, we can define objects with properties. The essential properties of our <code class="language-plaintext highlighter-rouge">ball</code> object are <code class="language-plaintext highlighter-rouge">position</code> and <code class="language-plaintext highlighter-rouge">speed</code>. The <code class="language-plaintext highlighter-rouge">position</code> represents the <em>coordinates</em> where the object is in the canvas space. Example:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">ball</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="na">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="na">speedX</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="na">speedY</span><span class="p">:</span> <span class="mi">0</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In order to make it move, we should change its position, and we can do it through the speed. This is the heart of our game:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nx">isGameStarted</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Ball movement</span>
  <span class="nx">ball</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">speedX</span> <span class="o">*</span> <span class="nx">modifier</span><span class="p">;</span>
  <span class="nx">ball</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">speedY</span> <span class="o">*</span> <span class="nx">modifier</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>As you can imagine, <code class="language-plaintext highlighter-rouge">isGameStarted</code> is just a boolean flag. But what’s <code class="language-plaintext highlighter-rouge">modifier</code>? Well, it’s the <strong>delta time</strong> of our game loop. Put simply, the <a href="//en.wikipedia.org/wiki/Delta_timing" rel="external">delta time</a> is the time elapsed between a frame and another. This is very useful because we can use it to calculate how fast the ball should move. Without it, the game would just lag all the time.</p>

<h3 id="ball-bounce">Ball bounce</h3>

<p>The game logic is mainly about the ball: it should be able to bounce away from the paddles. How can you implement that? It’s pretty simple - have a look at the code below.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Ball is out of the left boundary</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">ball</span><span class="p">.</span><span class="nx">x</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Player 2 wins!</span>
  <span class="nx">p2</span><span class="p">.</span><span class="nx">score</span><span class="o">++</span><span class="p">;</span>
  <span class="nx">reset</span><span class="p">();</span> <span class="c1">// reset the game to the initial state</span>
<span class="p">}</span>

<span class="c1">// Ball is out of the right boundary</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">ball</span><span class="p">.</span><span class="nx">x</span> <span class="o">&gt;=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span> <span class="o">-</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Player 1 wins!</span>
  <span class="nx">p1</span><span class="p">.</span><span class="nx">score</span><span class="o">++</span><span class="p">;</span>
  <span class="nx">reset</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">// Ball is colliding with the top</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">ball</span><span class="p">.</span><span class="nx">y</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">ball</span><span class="p">.</span><span class="nx">speedY</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">ball</span><span class="p">.</span><span class="nx">speedY</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Ball is colliding with the bottom</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">ball</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">size</span> <span class="o">&gt;=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">ball</span><span class="p">.</span><span class="nx">speedY</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">ball</span><span class="p">.</span><span class="nx">speedY</span><span class="p">)</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="c1">// inverted</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Can you see what’s going on in the code? Basically, if the ball goes beyond the canvas’ left or right boundaries, all we do is <strong>increment the score and reset the game</strong>. If the ball touches the top or the bottom instead, we <strong>invert its speed on the Y axis</strong>. If you think about it, it’s all you need to make something reflect over a surface. So, in other words, if the speed is negative we make it positive, and viceversa.</p>

<h3 id="collision-detection">Collision detection</h3>

<p>What should happen when the ball touches one of the paddles? Fundamentally the same thing explained above: it should bounce away, reflecting on the paddle’s surface (and to do this we invert the Y speed). But how do we actually check if they are <strong>colliding</strong>?</p>

<p>The most common kind of collision detection is called <strong>AABB - Axis-Aligned Bounding Boxes</strong>. You can find plenty of resources around the Web explaining how this technique works, so I won’t talk about it (have a quick search for <em>“AABB collision detection”</em>, or just keep reading). As <a href="http://en.wikipedia.org/wiki/Linus_Torvalds" rel="external">Linus Torvalds</a> once said,</p>

<blockquote>
  <p>“Talk is cheap. Show me the code.”</p>
</blockquote>

<p>Here we go:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span>
  <span class="nx">ball</span><span class="p">.</span><span class="nx">x</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="nx">p1</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">width</span><span class="p">)</span>
  <span class="o">&amp;&amp;</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">x</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="nx">ball</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span>
  <span class="o">&amp;&amp;</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">y</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="nx">p1</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span>
  <span class="o">&amp;&amp;</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">y</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="nx">ball</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Ball is colliding with the left paddle</span>
  <span class="c1">// Ensure the speed on the X axis is positive</span>
  <span class="nx">ball</span><span class="p">.</span><span class="nx">speedX</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">ball</span><span class="p">.</span><span class="nx">speedX</span><span class="p">);</span>

  <span class="c1">// Give the ball a bit of randomness by</span>
  <span class="c1">// increasing/decreasing its speed on the Y axis</span>
  <span class="nx">ball</span><span class="p">.</span><span class="nx">speedY</span> <span class="o">=</span> <span class="nx">randomize</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The logic for the right paddle is exactly the same, but the speed on the X axis should be negative instead. In my case I also added a <code class="language-plaintext highlighter-rouge">randomize()</code> function, so the game will be more interesting - you don’t have to implement it this way, but a bit of randomness never hurts in gaming!</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">randomize</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Random float between 0 and 999.9</span>
  <span class="kd">var</span> <span class="nx">_rand</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">;</span>
  <span class="c1">// positive or negative?</span>
  <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mf">0.5</span> <span class="p">?</span> <span class="nx">_rand</span> <span class="p">:</span> <span class="nx">_rand</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="paddle-movement">Paddle movement</h3>

<p>We move the paddles with the keyboard. Keyboard controls can be handled simply by keeping track of which key is currently being pressed (watch for the <code class="language-plaintext highlighter-rouge">keydown</code> event). We can use a simple JavaScript object for that (or an array if you prefer):</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Handle keyboard controls</span>
<span class="kd">var</span> <span class="nx">keysDown</span> <span class="o">=</span> <span class="p">{};</span>

<span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">keydown</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">keysDown</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">},</span> <span class="kc">false</span><span class="p">);</span>

<span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">keyup</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">delete</span> <span class="nx">keysDown</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">];</span>
<span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">keyup</code> and <code class="language-plaintext highlighter-rouge">keydown</code> events are the only two we need for handling the whole keyboard. So on <code class="language-plaintext highlighter-rouge">keydown</code> we add the key; on <code class="language-plaintext highlighter-rouge">keyup</code> we remove it. Simple.</p>

<p>Of course we are going to need JavaScript objects for the paddles as well. In my game I called them <code class="language-plaintext highlighter-rouge">p1</code> and <code class="language-plaintext highlighter-rouge">p2</code>, which can be interpreted as <em>players</em> too.</p>

<p>Here’s the code:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Update game objects</span>
<span class="kd">var</span> <span class="nx">update</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">modifier</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="mi">87</span> <span class="k">in</span> <span class="nx">keysDown</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// P1 holding up (key: w)</span>
    <span class="nx">p1</span><span class="p">.</span><span class="nx">y</span> <span class="o">-=</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">speed</span> <span class="o">*</span> <span class="nx">modifier</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="mi">83</span> <span class="k">in</span> <span class="nx">keysDown</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// P1 holding down (key: s)</span>
    <span class="nx">p1</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">speed</span> <span class="o">*</span> <span class="nx">modifier</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="mi">38</span> <span class="k">in</span> <span class="nx">keysDown</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// P2 holding up (key: arrow up)</span>
    <span class="nx">p2</span><span class="p">.</span><span class="nx">y</span> <span class="o">-=</span> <span class="nx">p2</span><span class="p">.</span><span class="nx">speed</span> <span class="o">*</span> <span class="nx">modifier</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="mi">40</span> <span class="k">in</span> <span class="nx">keysDown</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// P2 holding down (key: arrow down)</span>
    <span class="nx">p2</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="nx">p2</span><span class="p">.</span><span class="nx">speed</span> <span class="o">*</span> <span class="nx">modifier</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="rendering-the-objects-in-the-canvas">Rendering the objects in the canvas</h3>

<p>Here’s the <code class="language-plaintext highlighter-rouge">render()</code> function, in all its glory:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">render</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">#0F0</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// green</span>

  <span class="c1">// P1</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="nx">p1</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>

  <span class="c1">// P2</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="nx">p2</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">p2</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span> <span class="nx">p2</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nx">p2</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>

  <span class="c1">// ball</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="nx">ball</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">size</span><span class="p">,</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span>

  <span class="c1">// Text options</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">rgb(250, 250, 250)</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">font</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">18px Helvetica</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">textAlign</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">left</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">textBaseline</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">top</span><span class="dl">"</span><span class="p">;</span>

  <span class="c1">// P1 Score</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="nx">p1</span><span class="p">.</span><span class="nx">score</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">);</span>

  <span class="c1">// P2 Score</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="nx">p2</span><span class="p">.</span><span class="nx">score</span><span class="p">,</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span> <span class="o">-</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>
<p>It’s probably worth mentioning that you can use <code class="language-plaintext highlighter-rouge">JSON.stringify()</code> to debug your objects directly in the canvas, e.g.:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Debugging the ball object</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="dl">"</span><span class="s2">ball: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">ball</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</code></pre></div></div>

<p>However, I don’t recommend it. Just use whatever your browser is offering! If you are a web developer you surely know that there’s a built-in JavaScript console for debugging in your browser (if you don’t, search for <em>developer tools</em>).</p>

<h3 id="resetting-the-game">Resetting the game</h3>

<p>We need to reset the game every time a player scores. The logic is very simple, we just need to provide default values for our objects. Example below.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Reset the game</span>
<span class="kd">var</span> <span class="nx">reset</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">isGameStarted</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

  <span class="nx">ball</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="p">(</span><span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span> <span class="o">-</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
  <span class="nx">ball</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="p">(</span><span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span> <span class="o">-</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>

  <span class="nx">ball</span><span class="p">.</span><span class="nx">speedX</span> <span class="o">=</span> <span class="nx">randomize</span><span class="p">();</span> <span class="c1">// randomly start going left or right</span>
  <span class="nx">ball</span><span class="p">.</span><span class="nx">speedY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<p>This is the main logic of Pong. However, it’s not perfect, and it could be improved a lot in several ways… for example by implementing <strong>physics rules</strong> (or by using a physics engine, that has already done the job for us). We have just simulated the reflection of a ball on a surface, but it’s not realistic at all - let’s make it better.</p>

<h2 id="the-hard-way">The “hard way”</h2>

<p>In a <em>proper</em> Pong game, you can usually control where the ball goes. It could have a steeper or shallower angle of reflection, based on where the ball landed. Should it land on one of the edges of the paddle, the collision should be inelastic. In case it lands exactly on the middle of the paddle, the collision should be <a href="http://hyperphysics.phy-astr.gsu.edu/hbase/elacol.html" rel="external">totally elastic</a>.</p>

<p>In order to implement physics rules in a game, you should have an understanding of basic vector math, trigonometry and - of course - physics. But don’t fear, you don’t have to know everything: just the basics. I personally didn’t know much about physics, but I learned it by reading about it.</p>

<p>Here are some useful resources on the Web:</p>

<ul>
  <li>Math lessons: <a href="//www.mathsisfun.com/" rel="external">www.mathsisfun.com</a></li>
  <li>Physics lessons: <a href="//www.physicsclassroom.com/" rel="external">www.physicsclassroom.com</a></li>
  <li>Vector math cheatsheet: <a href="//higherorderfun.com/blog/2012/06/03/math-for-game-programmers-05-vector-cheat-sheet/" rel="external">higherorderfun.com/blog/2012/06/03/math-for-game-programmers-05-vector-cheat-sheet/</a></li>
  <li>Linear algebra for game developers: <a href="//blog.wolfire.com/2009/07/linear-algebra-for-game-developers-part-1/" rel="external">blog.wolfire.com/2009/07/linear-algebra-for-game-developers-part-1/</a></li>
</ul>

<p>Let’s explore together the potential of 2D vectors.</p>

<h3 id="using-2d-vectors">Using 2D Vectors</h3>

<p>The main thing you’ll have to understand is how vectors are used in game development. As an example, let’s go back to our <code class="language-plaintext highlighter-rouge">ball</code> object and modify it to use vectors. It will look like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">ball</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">position</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Vector</span><span class="p">({</span> <span class="na">x</span><span class="p">:</span> <span class="mi">0</span> <span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="mi">0</span> <span class="p">}),</span>
  <span class="na">velocity</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Vector</span><span class="p">({</span> <span class="na">x</span><span class="p">:</span> <span class="mi">0</span> <span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="mi">0</span> <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Four values at the price of two attributes! And this is a lot better now, not only because we are using less attributes, but because we can use vector math. Believe me, vectors simplify your game a lot.</p>

<p>You may have noticed that I didn’t use <code class="language-plaintext highlighter-rouge">speed</code>, but I used <code class="language-plaintext highlighter-rouge">velocity</code> instead. The reason is that <code class="language-plaintext highlighter-rouge">speed</code> is a <em>scalar</em> quantity, while <code class="language-plaintext highlighter-rouge">velocity</code> is a <em>vector</em> quantity. Put simply, <code class="language-plaintext highlighter-rouge">speed</code> is an information that’s <em>contained</em> in <code class="language-plaintext highlighter-rouge">velocity</code>! You may want to <a rel="external" href="//www.physicsclassroom.com/class/1DKin/Lesson-1/Speed-and-Velocity">read about it</a>, albeit not directly related to programming.</p>

<h3 id="a-proper-ball-reflection">A proper ball reflection</h3>

<p>We can implement proper reflection (not a fake one) by using this JavaScript function:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">ball</span> <span class="o">=</span> <span class="p">{</span>
  <span class="c1">// the velocity vector</span>
  <span class="na">velocity</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Vector</span><span class="p">(),</span>

  <span class="cm">/*
  * The formula:
  *
  *  R = 2(V · N) * N - V
  *
  * V: velocity vector
  * N: a normalized vector of the plane surface (e.g. paddle or wall)
  * R: the reflected velocity vector
  */</span>
  <span class="na">deflect</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">N</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">dot</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">velocity</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">N</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">v1</span> <span class="o">=</span> <span class="nx">N</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nx">dot</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">velocity</span> <span class="o">=</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">subSelf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">velocity</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>This is how I’ve implemented it by using a vector library I found on the Web (find the <a rel="external" href="https://github.com/dudeOMG/pong/blob/master/js/vector2.js">source code on GitHub</a>). Given a paddle’s normal, it will reflect any vector, but you have to make sure the paddle’s normal is a unit vector (in other words, it’s <em>normalized</em>).</p>

<h2 id="conclusion">Conclusion</h2>

<p>I hope you enjoyed this article. Who’s following my blog since the beginning will probably remember <a href="/playing-around-with-javascript/">my first blog post</a>. It was more than 2 years ago, and at that time I was really excited by the idea to build a game with JavaScript. I finally did it, and it has been fun indeed! However, I learned a big lesson: although it was fun, it wasn’t really worth reinventing the wheel.</p>

<p>So, if you got through all this tutorial, first of all congratulations! Secondly, consider using a game engine. Thirdly, maybe consider <em>not</em> using JavaScript… just use whatever you feel comfortable with. For instance, if you like the Ruby language (<a href="/ruby-is-magic/">I do!</a>), you could use <a rel="external" href="//opalrb.org/">Opal</a>, a Ruby to JavaScript compiler.</p>

<h2 id="demo-and-source-code">Demo and source code</h2>

<p>You can <a href="/games/pong/">play the game here</a>.</p>

<p>The <a rel="external" href="https://github.com/dudeOMG/pong">full source code</a> is on GitHub so you can clone it, fork it and even make your own from scratch, if you feel like it’s worth your time. If you are interested in the simple way, checkout the <a rel="external" href="https://github.com/dudeOMG/pong/releases/tag/v1.0">v1.0 release</a>.
The hard way is in the master branch.</p>

<p>As always, if you have any thoughts or questions, feel free to leave a comment below.</p>

<p>Have fun!</p>

]]></content>
  </entry>
  
</feed>
