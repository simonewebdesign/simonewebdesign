<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Articles about Ruby | Simone Web Design]]></title>
  <link href="https://www.simonewebdesign.it/categories/ruby/atom.xml" rel="self"/>
  <link href="https://www.simonewebdesign.it/"/>
  <updated>2021-06-11T20:24:10+01:00</updated>
  <id>https://www.simonewebdesign.it/</id>
  <author>
    <name><![CDATA[Simone Vittori]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[Don't stop learning]]></title>
    <link href="https://www.simonewebdesign.it/dont-stop-learning/"/>
    <updated>2018-02-21T00:00:00+00:00</updated>
    <id>https://www.simonewebdesign.it/dont-stop-learning</id>
    <content type="html"><![CDATA[<p>Back in the days, when I got serious about becoming a "real programmer", I decided I wanted to learn Java.</p>

<p>I didn’t know anything about OOP, Design Patterns, Single Responsibility… all I knew was some PHP, Visual Basic, and database design stuff. That was it.</p>

<p>So I went to a book store and I bought this book about Object-Oriented Programming in Java 6. It was a massive book, probably around 1000 pages of code and programming best practices, and I read like 80% of it. Some parts were too advanced for me, but I learned a lot.</p>

<p>I used to like Java. I thought, “so this is what real programming looks like, with classes and inheritance. That’s the right way”.</p>

<p>I actually believed this for a while, until that day…</p>

<p>One day I went to this website, projecteuler.net, which is basically a way to prove your skills by solving difficult programming challenges, and learn in the process.</p>

<p>It was years ago, but I remember I solved the first couple exercises pretty easily. The third one was a bit harder. Here’s the original text:</p>

<blockquote>
  <p>A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.</p>
  <p>Find the largest palindrome made from the product of two 3-digit numbers.</p>
</blockquote>

<p><small>Source: <a href="https://projecteuler.net/problem=4">https://projecteuler.net/problem=4</a></small></p>

<p>I spent a few hours on it before coming up with this:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">System</span><span class="o">.</span><span class="na">out</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Euler4</span>
<span class="o">{</span>
  <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">MIN</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
  <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">MAX</span> <span class="o">=</span> <span class="mi">999</span><span class="o">;</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">getPalindromes</span><span class="o">(</span><span class="kt">int</span> <span class="n">min</span><span class="o">,</span> <span class="kt">int</span> <span class="n">max</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">palindromes</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">max</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">min</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span>
    <span class="o">{</span>
      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">max</span><span class="o">;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="n">min</span><span class="o">;</span> <span class="n">j</span><span class="o">--)</span>
      <span class="o">{</span>
        <span class="kt">int</span> <span class="n">product</span> <span class="o">=</span> <span class="n">i</span> <span class="o">*</span> <span class="n">j</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">isPalindrome</span><span class="o">(</span><span class="k">new</span> <span class="nc">Integer</span><span class="o">(</span><span class="n">product</span><span class="o">).</span><span class="na">toString</span><span class="o">()))</span>
          <span class="n">palindromes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">product</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">palindromes</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isPalindrome</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>

    <span class="kt">char</span> <span class="n">firstChar</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
    <span class="kt">char</span> <span class="n">lastChar</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="mi">1</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">firstChar</span> <span class="o">==</span> <span class="n">lastChar</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="nf">isPalindrome</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="mi">1</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getHighestNumber</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="kt">int</span> <span class="n">highestNumber</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">number</span> <span class="o">:</span> <span class="n">numbers</span><span class="o">)</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">number</span> <span class="o">&gt;</span> <span class="n">highestNumber</span><span class="o">)</span>
        <span class="n">highestNumber</span> <span class="o">=</span> <span class="n">number</span><span class="o">;</span>
    <span class="k">return</span> <span class="n">highestNumber</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">palindromes</span> <span class="o">=</span> <span class="n">getPalindromes</span><span class="o">(</span><span class="no">MIN</span><span class="o">,</span> <span class="no">MAX</span><span class="o">);</span>
    <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getHighestNumber</span><span class="o">(</span><span class="n">palindromes</span><span class="o">));</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>It’s 46 lines of code, without counting blank lines. Not too bad, right?</p>

<p>Ok, don’t be mean. I know that’s probably shitty code, but it was my own solution and I was quite proud of it.</p>

<p>Now, when you finish a challenge successfully, you’re given access to the forum, where other programmers post their own solutions in many different languages.</p>

<p>That’s where I first discovered <a href="/ruby-is-magic/">Ruby</a>.</p>

<p>I was reading the thread about the problem I just solved, when I stumbled across this Ruby solution:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">m</span> <span class="o">=</span> <span class="mi">0</span>
<span class="mi">901</span><span class="p">.</span><span class="nf">upto</span><span class="p">(</span><span class="mi">999</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="o">|</span>
  <span class="mi">901</span><span class="p">.</span><span class="nf">upto</span><span class="p">(</span><span class="mi">999</span><span class="p">){</span><span class="o">|</span><span class="n">b</span><span class="o">|</span>
    <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="p">).</span><span class="nf">to_s</span>
    <span class="n">m</span> <span class="o">=</span> <span class="p">[</span><span class="n">m</span><span class="p">,</span> <span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="p">].</span><span class="nf">max</span> <span class="k">if</span> <span class="n">s</span> <span class="o">==</span> <span class="n">s</span><span class="p">.</span><span class="nf">reverse</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nb">puts</span> <span class="n">m</span>
</code></pre></div></div>

<p>And I was like, “wow, seriously? Only 8 lines of code?”.</p>

<p>I couldn’t believe my eyes. I was staring at something marvelous; some beauty that I never came across before.</p>

<p>Ruby is an object-oriented programming language that focuses on expressiveness and readability.</p>

<p>It was love at first sight. I started reading about this amazing language, about the fact that everything in Ruby is an object, even integers, and that you can write code like <code class="language-plaintext highlighter-rouge">3.times { print "Hello" }</code> to simply print “Hello” 3 times. It was like reading English, and I felt truly amazed, humbled, and inspired.</p>

<hr />

<p>Anyway, that’s just part of my story about becoming a better programmer. I’m not sure what the point is, I just felt like writing it down. But if, like me, you’re one of those people that need some ‘takeaway’ from a story, I guess it should be this:</p>

<blockquote>
  <p>Just don't stop learning, ever.</p>
  <p>Keep on learning and practicing, and you too will discover beautiful things.</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with rbenv]]></title>
    <link href="https://www.simonewebdesign.it/getting-started-with-rbenv/"/>
    <updated>2014-07-14T11:10:14+01:00</updated>
    <id>https://www.simonewebdesign.it/getting-started-with-rbenv</id>
    <content type="html"><![CDATA[<p>If you are struggling to get rbenv working on your machine, then I believe you landed in the right place: here I’m sharing some gotchas I had while setting up rbenv on Mac OS X 10.9.3.</p>

<p>First of all, <strong>make sure you remove RVM completely. It’s not compatible with rbenv.</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm</span> <span class="nt">-r</span> ~/.rvm
</code></pre></div></div>

<p>Remove it from your <code class="language-plaintext highlighter-rouge">$PATH</code> as well.</p>

<p>I’m using <a href="http://fishshell.com/">fish shell</a>, that has its own quirks, such as it doesn’t have a <code class="language-plaintext highlighter-rouge">export</code> command to export variables to <code class="language-plaintext highlighter-rouge">$PATH</code>. Instead it uses <code class="language-plaintext highlighter-rouge">set</code>. E.g.:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set </span>VARIABLE VALUE
</code></pre></div></div>

<p>For example, in order to call <code class="language-plaintext highlighter-rouge">rbenv</code>, I set up my <code class="language-plaintext highlighter-rouge">$PATH</code> this way:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set</span> <span class="nt">-u</span> fish_user_paths <span class="nv">$fish_user_paths</span> ~/.rbenv/bin
</code></pre></div></div>

<p>Fish also handles things a bit differently. If you are using it, you’ll probably be burned by the fact it doesn’t understand the <code class="language-plaintext highlighter-rouge">$</code> function that in POSIX shells creates a sub shell. Fortunately I managed to find a fix for that: <a href="https://coderwall.com/p/hmousw">see this article</a>. Basically it says you need to add this code to your <code class="language-plaintext highlighter-rouge">config.fish</code> file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set</span> <span class="nt">-gx</span> RBENV_ROOT /usr/local/var/rbenv
<span class="nb">.</span> <span class="o">(</span>rbenv init -|psub<span class="o">)</span>
</code></pre></div></div>

<p>But pay attention and make sure you understand what’s going on here. Actually the code above didn’t work for me, as <strong>the installation path of my rbenv was different. If you installed rbenv with <code class="language-plaintext highlighter-rouge">git clone</code>, the right code is:</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set</span> <span class="nt">-gx</span> RBENV_ROOT ~/.rbenv
<span class="nb">.</span> <span class="o">(</span>rbenv init -|psub<span class="o">)</span>
</code></pre></div></div>

<p>In fish it’s also possible (albeit not recommended) to use the <code class="language-plaintext highlighter-rouge">config.fish</code> file in order to set the <code class="language-plaintext highlighter-rouge">$PATH</code> variable permanently. You can do it with (e.g.):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set</span> <span class="nt">-x</span> PATH ~/.rbenv/shims /usr/local/bin /usr/bin /bin <span class="nv">$PATH</span>
</code></pre></div></div>

<p>A big gotcha here is to have <code class="language-plaintext highlighter-rouge">~/.rbenv/shims</code> <strong>before</strong> <code class="language-plaintext highlighter-rouge">/bin</code> and <code class="language-plaintext highlighter-rouge">/usr/bin</code>, otherwise the shell will load the system’s Ruby first (and <a href="http://robots.thoughtbot.com/psa-do-not-use-system-ruby">you don’t want to use the system’s Ruby</a> for your projects).</p>

<p>To ensure I was using the right Ruby version, I moved the system Ruby away, in <code class="language-plaintext highlighter-rouge">/tmp</code>. Of course you need to <code class="language-plaintext highlighter-rouge">sudo</code> for that:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo mv</span> /usr/bin/ruby /tmp
</code></pre></div></div>

<p>Another super important thing is: <strong>NEVER EVER install gems using <code class="language-plaintext highlighter-rouge">sudo</code></strong>. If you do that you’re going to have serious problems/conflicts and weird errors in your shell. Do yourself a favour by installing things in your home (<code class="language-plaintext highlighter-rouge">~</code>) and avoiding <code class="language-plaintext highlighter-rouge">sudo</code> at all costs. <em>Always.</em></p>

<p>A good thing to do for ensuring you are going down the right path is to use <code class="language-plaintext highlighter-rouge">which</code>: <code class="language-plaintext highlighter-rouge">which rbenv</code>, <code class="language-plaintext highlighter-rouge">which ruby</code> and <code class="language-plaintext highlighter-rouge">which gem</code> will tell you if you actually have your stuff in the right place (that is the <code class="language-plaintext highlighter-rouge">.rbenv/shims</code> on your home folder).</p>

<p>At this stage you may be able to install Ruby (you need the <a href="https://github.com/sstephenson/ruby-build">ruby-build</a> plugin for that). Run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rbenv <span class="nb">install</span> <span class="nt">-l</span>
</code></pre></div></div>

<p>The command above will give you a list of all the available rubies to install. Run, for example:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rbenv <span class="nb">install </span>2.1.2
rbenv rehash
</code></pre></div></div>

<p>The above will install Ruby 2.1.2 into <code class="language-plaintext highlighter-rouge">~/.rbenv/versions</code> and will rebuild your shim files. Note that you need to run <code class="language-plaintext highlighter-rouge">rbenv rehash</code> every time after you install a version of Ruby.</p>

<p>Another useful command is:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rbenv global
</code></pre></div></div>

<p>This tells you which version of Ruby you have. It may differ from what <code class="language-plaintext highlighter-rouge">ruby -v</code> says to you, and if that’s your case, you’ll probably want to <a href="https://github.com/sstephenson/rbenv#understanding-path">check your <code class="language-plaintext highlighter-rouge">$PATH</code></a>.</p>

<p>Hopefully that’s enough for getting you started with rbenv. Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby is Magic]]></title>
    <link href="https://www.simonewebdesign.it/ruby-is-magic/"/>
    <updated>2014-04-30T01:07:00+01:00</updated>
    <id>https://www.simonewebdesign.it/ruby-is-magic</id>
    <content type="html"><![CDATA[<p>Have you ever heard about <a href="https://ruby-lang.org/" rel="external">Ruby</a>? It's my favourite programming language. It was invented in Japan, which is probably the most amazing country in the world, and I think no language can beat Ruby when it comes to magic. Yes: Ruby is Magic.</p>

<p>You don’t believe me, do you? Fair enough, but let me show you why Ruby is so awesome.</p>

<h2 id="you-can-read-and-write-it-like-english">You can read and write it like English.</h2>

<p>Yes, it’s true. Ruby is so simple and intuitive that you can think in English before writing some Ruby code. For example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">speak_english</span>
  <span class="nb">print</span> <span class="s2">"Hello, world!"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The code above is a Ruby function (or method) declaration. So, when you want to run the <code class="language-plaintext highlighter-rouge">speak_english</code> function, you do it this way:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">speak_english</span>
<span class="no">Hello</span><span class="p">,</span> <span class="n">world!</span> <span class="o">=&gt;</span> <span class="kp">nil</span>
</code></pre></div></div>

<p>You may have noticed the <code class="language-plaintext highlighter-rouge">nil</code>: what’s that? It’s just nothing, literally. It represents the void (emptiness, no value at all). In other languages, such as SQL (the mother tongue of databases), you can find it as <code class="language-plaintext highlighter-rouge">NULL</code>.</p>

<h2 id="in-ruby-everything-is-an-object">In Ruby, everything is an object.</h2>

<p>Do you know about OOP? It means Object-Oriented Programming, and it’s probably the most important programming paradigm ever invented so far. Ruby takes full advantage of OOP. And when I say full, I literally mean: <em>everything</em>, in Ruby, is an object. Even numbers! If you know at least one programming language, say Java, you must be aware of the fact that Java numbers are primitive types, which mean that they’re not objects. In Ruby, things are different.</p>

<p>Let’s make an example. Let’s say you want to use the <code class="language-plaintext highlighter-rouge">speak_english</code> function 3 times. In Java, you’d do something like:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span>
<span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
        <span class="o">{</span>
            <span class="n">speakEnglish</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">speakEnglish</span><span class="o">()</span>
    <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello, world!"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>So much code for something so simple… in Ruby, instead, you can do this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">3</span><span class="p">.</span><span class="nf">times</span> <span class="k">do</span>
  <span class="n">speak_english</span>
<span class="k">end</span>
<span class="no">Hello</span><span class="p">,</span> <span class="n">world!</span> <span class="no">Hello</span><span class="p">,</span> <span class="n">world!</span> <span class="no">Hello</span><span class="p">,</span> <span class="n">world!</span> <span class="o">=&gt;</span> <span class="mi">3</span>
</code></pre></div></div>

<p>See? I called a function on a number! Cool, isn’t it? And I used only 3 lines of code :-)</p>

<h2 id="ruby-is-clear-concise-and-understandable">Ruby is clear, concise and understandable.</h2>

<p>I was a PHP developer when I discovered Ruby. Although I had a bit of OOP background, I was used to write PHP code in a procedural style. Procedural code looks something like:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">doThis</span><span class="p">();</span>
<span class="nx">doThat</span><span class="p">();</span>
<span class="nx">doSomethingElse</span><span class="p">();</span>
</code></pre></div></div>

<p>There’s absolutely nothing wrong with this approach, apart from the fact that it starts being cumbersome, sometimes… because it’s not Object-Oriented. I’ll make one last example, taken from a beautiful <a href="https://stackoverflow.com/questions/1113611/what-does-ruby-have-that-python-doesnt-and-vice-versa#answer-4102608">StackOverflow’s answer</a>.</p>

<p>Reverse the words in this string:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>backwards is sentence This
</code></pre></div></div>

<p>So the final result must be:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>This sentence is backwards
</code></pre></div></div>

<p>When you think about how you would do it, you’d do the following:</p>

<ul>
  <li>Split the sentence up into words</li>
  <li>Reverse the words</li>
  <li>Re-join the words back into a string</li>
</ul>

<p>In PHP, you’d do this:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$sentence</span> <span class="o">=</span> <span class="s2">"backwards is sentence This"</span><span class="p">;</span>
<span class="nv">$splitted</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s2">" "</span><span class="p">,</span> <span class="nv">$sentence</span><span class="p">);</span>
<span class="nv">$reversed</span> <span class="o">=</span> <span class="nb">array_reverse</span><span class="p">(</span><span class="nv">$splitted</span><span class="p">);</span>
<span class="nv">$rejoined</span> <span class="o">=</span> <span class="nb">implode</span><span class="p">(</span><span class="s2">" "</span><span class="p">,</span> <span class="nv">$reversed</span><span class="p">);</span>
</code></pre></div></div>

<p>In Python:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sentence</span> <span class="o">=</span> <span class="s">"backwards is sentence This"</span>
<span class="n">splitted</span> <span class="o">=</span> <span class="n">sentence</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>
<span class="nb">reversed</span> <span class="o">=</span> <span class="nb">reversed</span><span class="p">(</span><span class="n">splitted</span><span class="p">)</span>
<span class="n">rejoined</span> <span class="o">=</span> <span class="s">" "</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">reversed</span><span class="p">)</span>
</code></pre></div></div>

<p>And Ruby:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sentence</span> <span class="o">=</span> <span class="s2">"backwards is sentence This"</span>
<span class="n">splitted</span> <span class="o">=</span> <span class="n">sentence</span><span class="p">.</span><span class="nf">split</span>
<span class="n">reversed</span> <span class="o">=</span> <span class="n">splitted</span><span class="p">.</span><span class="nf">reverse</span>
<span class="n">rejoined</span> <span class="o">=</span> <span class="n">reversed</span><span class="p">.</span><span class="nf">join</span>
</code></pre></div></div>

<p>Every language required 4 lines of code. Now let’s compare the one-liners.</p>

<h3 id="php">PHP</h3>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">implode</span><span class="p">(</span><span class="s2">" "</span><span class="p">,</span> <span class="nb">array_reverse</span><span class="p">(</span><span class="nb">explode</span><span class="p">(</span><span class="s2">" "</span><span class="p">,</span> <span class="nv">$sentence</span><span class="p">)));</span>
</code></pre></div></div>

<h3 id="python">Python</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">" "</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">reversed</span><span class="p">(</span><span class="n">sentence</span><span class="p">.</span><span class="n">split</span><span class="p">()))</span>
</code></pre></div></div>

<h3 id="ruby">Ruby</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sentence</span><span class="p">.</span><span class="nf">split</span><span class="p">.</span><span class="nf">reverse</span><span class="p">.</span><span class="nf">join</span> <span class="s2">" "</span>
</code></pre></div></div>

<p>Now, can you see the beauty of Ruby? It’s just… <em>magic</em>.</p>

<iframe width="100%" height="315" src="https://www.youtube-nocookie.com/embed/NLQzSZmxJLQ" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4: update/synchronize views with database schema after a migration]]></title>
    <link href="https://www.simonewebdesign.it/ruby-on-rails-synchronize-views-database-after-migration/"/>
    <updated>2014-02-09T00:00:00+00:00</updated>
    <id>https://www.simonewebdesign.it/ruby-on-rails-synchronize-views-database-after-migration</id>
    <content type="html"><![CDATA[<p>
  So you just updated your model and the related database schema, but your views are now obsolete. How to refresh them?
</p>

<p>
  Well, there are a lot of premises to say here. First, <strong>there&#8217;s no actual way to synchronize your views with your model.</strong> The best way is to <strong>do it manually</strong>, but it&#8217;s not the <em>only</em> way. The other way, which I&#8217;m going to explain in this post, actually only works if you are willing to <em>scaffold</em> your whole model/view/controller/tests from scratch. This is probably not desirable in most of cases, but I assure you can safely try this path if you are in a early stage of development, or if you are ok with the default (generated) Rails&#8217; views. So, whatever, if you don&#8217;t want to <code>rake generate scaffold your_resource</code> again, you can stop reading now.
</p>

<hr />

<p>
  Oh well, you are still reading :-)
</p>

<p>
  I&#8217;ll proceed explaining how to synchronize your views after the migration(s) you have run. Let&#8217;s just start from scratch.
</p>

<h2>
  A full example
</h2>

<p>
  Let&#8217;s say we have these two models: <code>Child</code> and <code>Toy</code>.
</p>

<h3 id="child">Child</h3>

<ul>
  <li>
    name
  </li>
  <li>
    birth_date
  </li>
</ul>

<h3 id="toy">Toy</h3>

<ul>
  <li>
    description
  </li>
  <li>
    price
  </li>
  <li>
    child_id
  </li>
</ul>

<p>
  As you might have already guessed, I am going to tie our models with a <em>one-to-many</em> relationship: a child <code>has_many</code> toys, and a toy <code>belongs_to</code> a child.
</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/models/child.rb</span>
<span class="k">class</span> <span class="nc">Child</span> <span class="o">&gt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:toys</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/models/toy.rb</span>
<span class="k">class</span> <span class="nc">Toy</span> <span class="o">&gt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:child</span>
<span class="k">end</span>
</code></pre></div></div>

<p>
  Let's create the application and scaffold these resources:
</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails new DemoApp <span class="o">&amp;&amp;</span> <span class="nb">cd </span>DemoApp
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails generate scaffold child name birth_date:date

<span class="nv">$ </span>rails generate scaffold toy description price:decimal child:references
</code></pre></div></div>

<p>
  Run the migrations:
</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rake db:migrate
<span class="o">==</span>  CreateChildren: migrating <span class="o">=================================================</span>
<span class="nt">--</span> create_table<span class="o">(</span>:children<span class="o">)</span>
   -&gt; 0.0014s
<span class="o">==</span>  CreateChildren: migrated <span class="o">(</span>0.0015s<span class="o">)</span> <span class="o">========================================</span>

<span class="o">==</span>  CreateToys: migrating <span class="o">=====================================================</span>
<span class="nt">--</span> create_table<span class="o">(</span>:toys<span class="o">)</span>
   -&gt; 0.0028s
<span class="o">==</span>  CreateToys: migrated <span class="o">(</span>0.0029s<span class="o">)</span> <span class="o">============================================</span>
</code></pre></div></div>

<p>
  We can now start the server and check that everything went good.
</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails s
<span class="o">=&gt;</span> Booting WEBrick
<span class="o">=&gt;</span> Rails 4.1.0.beta1 application starting <span class="k">in </span>development on http://0.0.0.0:3000
...
</code></pre></div></div>

<p><img src="/images/1-listing-children.png" loading="lazy" alt="listing children empty" /></p>

<p>
  It looks fine, except for one thing: there's no data displayed! Let's add some entries manually.
</p>

<p><img src="/images/2-listing-children.png" loading="lazy" alt="listing children" /></p>

<p>
  Good. Now let's give some toys to our boys:
</p>

<p><img src="/images/3-toy-created.png" loading="lazy" alt="toy successfully created" /></p>

<p>
  Done. But wait a minute: this view looks a bit... crappy, doesn't it? We don't want to see a reference to a child... just his/her name. Even the prices don't look right.
</p>

<p>
  Let's generate the scaffold again, with some corrections.
</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails g scaffold toy description:string<span class="o">{</span>50<span class="o">}</span> price:decimal<span class="o">{</span>4,2<span class="o">}</span>
      invoke  active_record
Another migration is already named create_toys: /Users/simo/Projects/DemoApp/db/migrate/20140209145850_create_toys.rb. Use <span class="nt">--force</span> to remove the old migration file and replace it.
</code></pre></div></div>

<p>
  Fair enough. We must destroy the entire scaffold before recreating it.
</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails destroy scaffold toy
      invoke  active_record
      remove    db/migrate/20140208224426_create_toys.rb
      remove    app/models/toy.rb
      remove    ...

<span class="nv">$ </span>rails generate scaffold toy description:string<span class="o">{</span>50<span class="o">}</span> price:decimal<span class="o">{</span>4,2<span class="o">}</span> child:references
      invoke  active_record
      create    db/migrate/20140209145850_create_toys.rb
      create    app/models/toy.rb
      create    ...
</code></pre></div></div>

<p>
  Ok. Let's give a quick look at the generated migration.
</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CreateToys</span> <span class="o">&gt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">create_table</span> <span class="ss">:toys</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">string</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">limit: </span><span class="mi">50</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">decimal</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">precision: </span><span class="mi">4</span><span class="p">,</span> <span class="ss">scale: </span><span class="mi">2</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">references</span> <span class="ss">:child</span><span class="p">,</span> <span class="ss">index: </span><span class="kp">true</span>

      <span class="n">t</span><span class="p">.</span><span class="nf">timestamps</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>
  It looks right. Let's run it!
</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rake db:migrate
<span class="o">==</span>  CreateToys: migrating <span class="o">=====================================================</span>
<span class="nt">--</span> create_table<span class="o">(</span>:toys<span class="o">)</span>
rake aborted!
An error has occurred, this and all later migrations canceled:

SQLite3::SQLException: table <span class="s2">"toys"</span> already exists: CREATE TABLE <span class="s2">"toys"</span> <span class="o">(</span><span class="s2">"id"</span> INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, <span class="s2">"description"</span> varchar<span class="o">(</span>50<span class="o">)</span>, <span class="s2">"price"</span> decimal<span class="o">(</span>4,2<span class="o">)</span>, <span class="s2">"child_id"</span> integer, <span class="s2">"created_at"</span> datetime, <span class="s2">"updated_at"</span> datetime<span class="o">)</span> /Users/simo/.rvm/gems/ruby-2.0.0-p353/gems/sqlite3-1.3.8/lib/sqlite3/database.rb:91:in <span class="sb">`</span>initialize<span class="s1">'
</span></code></pre></div></div>

<p>
  Whoops! The table already exists. We should remove it first. Edit the migration:
</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CreateToys</span> <span class="o">&gt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="c1"># This will do the work</span>
    <span class="n">drop_table</span> <span class="ss">:toys</span>

    <span class="n">create_table</span> <span class="ss">:toys</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">string</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">limit: </span><span class="mi">50</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">decimal</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">precision: </span><span class="mi">4</span><span class="p">,</span> <span class="ss">scale: </span><span class="mi">2</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">references</span> <span class="ss">:child</span><span class="p">,</span> <span class="ss">index: </span><span class="kp">true</span>

      <span class="n">t</span><span class="p">.</span><span class="nf">timestamps</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>
  And migrate again:
</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rake db:migrate
<span class="o">==</span>  CreateToys: migrating <span class="o">=====================================================</span>
<span class="nt">--</span> drop_table<span class="o">(</span>:toys<span class="o">)</span>
   -&gt; 0.0107s
<span class="nt">--</span> create_table<span class="o">(</span>:toys<span class="o">)</span>
   -&gt; 0.0109s
<span class="o">==</span>  CreateToys: migrated <span class="o">(</span>0.0220s<span class="o">)</span> <span class="o">============================================</span>
</code></pre></div></div>

<p>
  Ok, we are ready to start the server again and see what changed.
</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails s
</code></pre></div></div>

<p>
  That's it. This is basically the process. It's way too labourious, I know, but the truth is that we just can't efficiently automate a process like this, because: what if we generate more migrations during the journey? We would have to delete them and recreate again the whole schema by running <code>rails generate scaffold</code>, <code>rake db:reset</code> and rerun the generate again and again... well, that sucks. At this stage we've got the point: it's better to do it manually! Rails gives us tons of helper methods to format prices and get things done, and that's definitely the path to follow.
</p>

<p>
  If you are still not convinced, you can check this <a href="https://stackoverflow.com/questions/1732135/question-regarding-rails-migration-and-synchronizing-views">question on StackOverflow</a>. Basically, it's almost the same question I had before writing this post. Both the question and the answer are quite old, and in the meantime the Rails Team didn't develop anything that would help us regenerating our views. This probably means <strong>we are not supposed to do it</strong>, don't you think? However, if your goal is to get focused on the backend without having to deal with the frontend, you can always use a gem like <a href="https://github.com/activescaffold/active_scaffold" title="Save time and headaches, and create a more easily maintainable set of pages, with ActiveScaffold. ActiveScaffold handles all your CRUD (create, read, update, delete) user interface needs, leaving you more time to focus on more challenging (and interesting!) problems."><code>ActiveScaffold</code></a>. But you have been warned!
</p>

<p>
  I hope you've found this article useful; thoughts are welcome, as always. If you want you can leave a comment below.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to set a default message in your exception]]></title>
    <link href="https://www.simonewebdesign.it/how-to-set-default-message-exception/"/>
    <updated>2014-01-10T00:00:00+00:00</updated>
    <id>https://www.simonewebdesign.it/how-to-set-default-message-exception</id>
    <content type="html"><![CDATA[<p>
  Today I was thinking about a way to define custom exceptions with a predefined error message. For example, instead of doing this:
</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">raise</span> <span class="no">MyError</span><span class="p">,</span> <span class="s2">"Something went wrong."</span>
</code></pre></div></div>

<p>
  We want to simply do:
</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">raise</span> <span class="no">MyError</span>
</code></pre></div></div>

<p>
  This could be useful because if we need to raise that same exception again and again, we don&#8217;t have to specify the error message every time.
</p>

<p>
  Well, how can we do that?
</p>

<p>
  I spent all day figuring out the best way, actually doing very bad things &#8211; I&#8217;ve even attempted to monkey-patch the Kernel module!<br />So &#8211; believe me &#8211; it&#8217;s not as simple as it appears to be. Or, at least, I thought this until I stumbled across <del><a title="Using Custom Error Messages for Cleaner Code">this article</a></del> (dead link).
</p>

<p>
  In short, you just need to override <code>Exception#message</code>.
</p>

<p>
  For example:
</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyError</span> <span class="o">&lt;</span> <span class="no">Exception</span>
  <span class="k">def</span> <span class="nf">message</span>
    <span class="s2">"a predefined message"</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">raise</span> <span class="no">MyError</span>
<span class="c1"># =&gt; MyError: a predefined message</span>
</code></pre></div></div>

<p>
  Quick note: I&#8217;m inheriting from <code>StandardError</code>, not <code>Exception</code>, because extending the <code>Exception</code> class in Ruby is considered really bad. Please don&#8217;t inherit from it: see <a href="https://stackoverflow.com/questions/10048173/why-is-it-bad-style-to-rescue-exception-e-in-ruby" title="Why is it bad style to rescue exception in Ruby?" rel="external">here</a> and <a href="http://www.skorks.com/2009/09/ruby-exceptions-and-exception-handling/" title="Ruby exceptions and exceptions handling" rel="external">here</a> for the reason (in few words it&#8217;s because you may catch errors that are not meant to be catched, such as <code>SyntaxError</code>).
</p>
<p>
  Of course you could also create a module with your own exceptions in it:
</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">CustomError</span>
  <span class="k">class</span> <span class="nc">AnError</span> <span class="o">&lt;</span> <span class="no">StandardError</span>
    <span class="k">def</span> <span class="nf">message</span>
      <span class="s2">"A more specific error"</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">class</span> <span class="nc">AnotherError</span> <span class="o">&lt;</span> <span class="no">StandardError</span>
    <span class="k">def</span> <span class="nf">message</span>
      <span class="s2">"just another error"</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>
  Or even a subclass of your custom error class:
</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">CustomError</span>
  <span class="k">class</span> <span class="nc">Error</span> <span class="o">&lt;</span> <span class="no">StandardError</span>
    <span class="k">def</span> <span class="nf">message</span>
      <span class="s2">"default error"</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">class</span> <span class="nc">SpecificError</span> <span class="o">&lt;</span> <span class="no">Error</span>
    <span class="k">def</span> <span class="nf">message</span>
      <span class="s2">"a more specific error"</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>
  However, this is not very useful. What I find useful, though, is that you can bring shared pieces of information from the base class to the subclasses, which is <abbr title="In my opinion">IMO</abbr> very desirable in error handling.
</p>

<p>
  Since <code>Exception#message</code> is nothing but an alias of <code>exception.to_s</code>, we can call <code>super</code> to get the superclass' message. For example, this is what I ended up doing:
</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">CustomError</span>

  <span class="k">class</span> <span class="nc">Error</span> <span class="o">&lt;</span> <span class="no">StandardError</span>
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">msg</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
      <span class="vi">@message</span> <span class="o">=</span> <span class="n">msg</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">message</span>
      <span class="s2">"Message from main class: </span><span class="si">#{</span><span class="vi">@message</span><span class="si">}</span><span class="s2">."</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">class</span> <span class="nc">SpecificError</span> <span class="o">&lt;</span> <span class="no">Error</span>
    <span class="k">def</span> <span class="nf">message</span>
      <span class="k">super</span> <span class="o">+</span> <span class="s2">" We also got a specific error."</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>
  And here's the result:
</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">raise</span> <span class="no">CustomError</span><span class="o">::</span><span class="no">SpecificError</span><span class="p">,</span> <span class="s2">"fubar"</span>
<span class="c1"># =&gt; CustomError::SpecificError: Message from main class: fubar. We also got a specific error.</span>
</code></pre></div></div>

<p>
  This demonstrates that we can potentially carry whatever information (i.e. instances of objects involved in the error) in order to better handle errors in our applications.
</p>

<p>
  That's it.<br /> As always, please feel free to share your thoughts by commenting below.
</p>
]]></content>
  </entry>
  
</feed>
