<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" media="screen" href="/stylesheets/atom.css"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Simone Web Design</title>
  <link href="https://www.simonewebdesign.it/atom.xml" rel="self"/>
  <link href="https://www.simonewebdesign.it/"/>
  <updated>2021-06-11T20:24:10+01:00</updated>
  <id>https://www.simonewebdesign.it/</id>
  <author>
    <name>Simone Vittori</name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[How to Install Global npm Packages on Heroku]]></title>
    <link href="https://www.simonewebdesign.it/how-to-install-global-npm-packages-on-heroku/"/>
    <updated>2021-05-29T00:00:00+01:00</updated>
    <id>https://www.simonewebdesign.it/how-to-install-global-npm-packages-on-heroku</id>
    <content type="html"><![CDATA[<p>If you need to install an <a href="https://www.npmjs.com/">npm</a> package <em>globally</em>, rather than <em>locally</em>, but don’t know how to do this on <a href="https://www.heroku.com/">Heroku</a>, you can follow this how-to guide.</p>

<!--more-->

<p>Before we start, a quick word of warning: it’s generally considered good practice to install your npm dependencies in the local <code class="language-plaintext highlighter-rouge">node_modules</code> folder, whenever possible. This means simply running <code class="language-plaintext highlighter-rouge">npm install</code> without the <code class="language-plaintext highlighter-rouge">--global</code> (<code class="language-plaintext highlighter-rouge">-g</code>) flag. However, sometimes this is not an option, for instance if you have a library or tool that expects a binary to be already present in the system, like in my case.</p>

<h1 id="the-problem">The problem</h1>

<p>Essentially, I had one problem: <strong>a Ruby gem that needed a Node.js package</strong> to be installed <strong>globally</strong>.</p>

<p>I had a <a href="https://jekyllrb.com/">Jekyll</a> blog use <a href="https://pugjs.org/">Pug</a> (Jade) for templating. Making Pug work locally was very easy using <a href="https://github.com/DougBeney/jekyll-pug">Jekyll-Pug</a>, a Jekyll plugin that enables Pug templates. However, when deploying on <a href="https://www.heroku.com/">Heroku</a>, the build would fail because of the missing Pug library.</p>

<p>The <a href="https://github.com/DougBeney/jekyll-pug">Jekyll-Pug</a> README is pretty clear:</p>

<blockquote>
  <p><strong>Note:</strong> you must have pug installed. To install it, simply enter the terminal command, <code class="language-plaintext highlighter-rouge">npm install pug -g</code>.</p>
</blockquote>

<p>Two issues here:</p>

<ol>
  <li>I was using <a href="https://github.com/heroku/heroku-buildpack-ruby">Heroku’s Ruby Buildpack</a>, but I also needed Node.js to be able to run <code class="language-plaintext highlighter-rouge">npm</code>;</li>
  <li>I wasn’t sure how to declare the global Node.js dependency.</li>
</ol>

<h1 id="the-solution">The solution</h1>

<p>Point #1 was pretty straightforward: I simply needed to add the <a href="https://elements.heroku.com/buildpacks/heroku/heroku-buildpack-nodejs">Heroku Buildpack for Node.js</a> alongside the Ruby one, essentially <a href="https://devcenter.heroku.com/articles/using-multiple-buildpacks-for-an-app">using two buildpacks instead of one</a>. You can do this by running:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>heroku buildpacks:add --index 1 heroku/nodejs
</code></pre></div></div>

<p>This will insert the Node.js buildpack <em>before</em> Ruby, so it will be executed first.</p>

<p>Point #2 was about installing Pug globally. The way I went to achieve this was by using package.json’s <a href="https://docs.npmjs.com/cli/v7/using-npm/scripts">scripts</a>. This is what my package.json looked like:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"npm install pug --global"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">npm install pug --global</code> command would run on Heroku when pushing and, thanks to the <a href="https://devcenter.heroku.com/articles/nodejs-support#multi-buildpack-behavior">multi-buildpack behaviour</a>, all Node.js-related binaries would be available in subsequent buildpacks as well.</p>

<p>So in my specific case, this meant that Jekyll could find the global Pug binary and compile the blog successfully. Problem solved!</p>

<h1 id="conclusion">Conclusion</h1>

<p>Whilst global dependencies are to avoid whenever possible, Heroku lets us run arbitrary commands and generate any build artifacts needed for our apps to function correctly. <a href="https://devcenter.heroku.com/articles/buildpacks">Buildpacks</a> are Heroku’s way of handling dependencies and compile code. They have a <a href="https://devcenter.heroku.com/articles/buildpacks#officially-supported-buildpacks">list of official buildpacks</a> for us to use, for free — and if you ever need to install a global dependency (or run any arbitrary command in Node.js, for that matter), you can do so using <a href="https://docs.npmjs.com/cli/v7/using-npm/scripts">scripts</a> in your package.json.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple Git Config For Different Folders]]></title>
    <link href="https://www.simonewebdesign.it/multiple-git-config-for-different-folders/"/>
    <updated>2020-11-23T00:00:00+00:00</updated>
    <id>https://www.simonewebdesign.it/multiple-git-config-for-different-folders</id>
    <content type="html"><![CDATA[<p>I wanted to have a clean separation between work-related repositories and my personal projects, as I often need to use a different email: for example, I’d like to sign git commits in the work repo with my work email, but keep using my personal email for the rest. How do you achieve this?</p>

<p>It’s actually pretty simple: I’ll show you how.</p>

<!--more-->

<h2 id="two-folders--one-for-your-projects-one-for-work">Two folders — one for your projects, one for work</h2>

<p>I like the idea of having two folders, each containing <em>many</em> git repositories: I’ll call them <code class="language-plaintext highlighter-rouge">Work</code> and <code class="language-plaintext highlighter-rouge">Projects</code>, but you’re naturally free to name them the way you prefer.</p>

<p>The first step is to <strong>create a file</strong> in your home directory, named <code class="language-plaintext highlighter-rouge">.gitconfig</code>. You probably have it already, and that’s fine. Just <strong>open it and paste this</strong>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">includeIf</span> <span class="s">"gitdir:~/Work/"</span><span class="p">]</span>
  <span class="n">path</span> <span class="o">=</span> <span class="o">~/</span><span class="n">Work</span><span class="o">/</span><span class="p">.</span><span class="n">gitconfig</span>
<span class="p">[</span><span class="n">includeIf</span> <span class="s">"gitdir:~/Projects/"</span><span class="p">]</span>
  <span class="n">path</span> <span class="o">=</span> <span class="o">~/</span><span class="n">Projects</span><span class="o">/</span><span class="p">.</span><span class="n">gitconfig</span>
</code></pre></div></div>

<p>It’s pretty self-explanatory, right? We’re essentially saying:</p>

<ul>
  <li>If the dir matches <code class="language-plaintext highlighter-rouge">~/Work/</code>, include the config located at path <code class="language-plaintext highlighter-rouge">~/Work/.gitconfig</code>;</li>
  <li>If the dir matches <code class="language-plaintext highlighter-rouge">~/Projects/</code>, include the config located at path <code class="language-plaintext highlighter-rouge">~/Projects/.gitconfig</code> .</li>
</ul>

<p>Note you don’t even need to create these files — just use <code class="language-plaintext highlighter-rouge">git config</code> to write in them. For example, to use your work email on all work-related repos, you might do:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--file</span> ~/Work/.gitconfig user.email john@example.work
</code></pre></div></div>

<p>This is great, because we can now have <strong>completely separate configurations</strong>, each living in their own separate folder, and the right configuration will be applied depending on the location. Awesome!</p>

<h3 id="caveats">Caveats</h3>

<p>There are a few little caveats to be aware of, just in case you run into issues. If you do, you may want to read the <em>Includes</em> section in the <a href="https://git-scm.com/docs/git-config#_includes">official docs</a> — for example, you know the trailing slash in <code class="language-plaintext highlighter-rouge">gitdir:~/Work/</code>? You’d think it wouldn’t matter, but it does: if the path ends with <code class="language-plaintext highlighter-rouge">/</code>, it matches <code class="language-plaintext highlighter-rouge">Work</code> and <strong>everything inside, recursively</strong>. Also, don’t add a space between <code class="language-plaintext highlighter-rouge">gitdir:</code> and the path, or it won’t work.</p>

<h3 id="sharing-common-configuration">Sharing common configuration</h3>

<p>You’ll likely want to avoid repeating yourself and share the common bits of configuration, such as <a href="https://www.git-scm.com/book/en/v2/Git-Basics-Git-Aliases">git aliases</a>, if you have any.</p>

<p>If that’s the case, just keep those in the global config. You can do so by using the <code class="language-plaintext highlighter-rouge">--global</code> flag, for example:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> alias.st status
</code></pre></div></div>

<hr />

<p>I hope you found this useful. If you run into trouble, feel free to leave me a comment below and I’ll try to help. <a href="https://hades.github.io/2010/01/git-your-friend-not-foe/">Remember, git is your friend</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inserting values of multiple types in Rust's HashMap]]></title>
    <link href="https://www.simonewebdesign.it/rust-hashmap-insert-values-multiple-types/"/>
    <updated>2020-07-06T00:00:00+01:00</updated>
    <id>https://www.simonewebdesign.it/rust-hashmap-insert-values-multiple-types</id>
    <content type="html"><![CDATA[<p>I was building a generic data store with Rust and I needed to implement a <strong>heterogeneous collection</strong> of keys and values. Essentially what I needed was a dictionary, but with values of dynamic type, like both strings and integers at the same time.</p>

<p>Rust is a statically typed language and, due to the memory safety guarantees we are given, all values of some type must have a known, fixed size at compile time, therefore we are not allowed to create a collection of multiple types. However, <a href="https://doc.rust-lang.org/reference/dynamically-sized-types.html" rel="external">dynamically sized types</a> also exist, and in this article I’ll show how to use them.</p>

<!--more-->

<p>Say we have a <a href="https://doc.rust-lang.org/std/collections/struct.HashMap.html" rel="external"><code class="language-plaintext highlighter-rouge">HashMap</code></a> and we want to add more than one value type to it.</p>

<p>For example:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="nn">collections</span><span class="p">::</span><span class="n">HashMap</span><span class="p">;</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">map</span> <span class="o">=</span> <span class="nn">HashMap</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>

    <span class="n">map</span><span class="nf">.insert</span><span class="p">(</span><span class="s">"a"</span><span class="p">,</span> <span class="s">"1"</span><span class="p">);</span>
    <span class="n">map</span><span class="nf">.insert</span><span class="p">(</span><span class="s">"b"</span><span class="p">,</span> <span class="s">"2"</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="n">in</span> <span class="o">&amp;</span><span class="n">map</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"{}: {}"</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This prints:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="p">:</span> <span class="mi">1</span>
<span class="n">b</span><span class="p">:</span> <span class="mi">2</span>
</code></pre></div></div>

<p>In the example above, the type of <code class="language-plaintext highlighter-rouge">map</code> is <code class="language-plaintext highlighter-rouge">HashMap&lt;&amp;str, &amp;str&gt;</code>. In other words, both keys and values are of type <code class="language-plaintext highlighter-rouge">&amp;str</code>.
What if we want the values to be of type <code class="language-plaintext highlighter-rouge">&amp;str</code> <em>and</em>, say, <code class="language-plaintext highlighter-rouge">i32</code>?</p>

<p>This won’t work:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="nn">collections</span><span class="p">::</span><span class="n">HashMap</span><span class="p">;</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">map</span> <span class="o">=</span> <span class="nn">HashMap</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>

    <span class="n">map</span><span class="nf">.insert</span><span class="p">(</span><span class="s">"a"</span><span class="p">,</span> <span class="s">"1"</span><span class="p">);</span>
    <span class="n">map</span><span class="nf">.insert</span><span class="p">(</span><span class="s">"b"</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="n">in</span> <span class="o">&amp;</span><span class="n">map</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"{}: {}"</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If we try it, we get this compile time error:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">error</span><span class="p">[</span><span class="n">E0308</span><span class="p">]:</span> <span class="n">mismatched</span> <span class="n">types</span>
  <span class="o">-</span><span class="k">-&gt;</span> <span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="py">.rs</span>

     <span class="n">map</span><span class="nf">.insert</span><span class="p">(</span><span class="s">"b"</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
                     <span class="o">^</span> <span class="n">expected</span> <span class="err">`</span><span class="o">&amp;</span><span class="nb">str</span><span class="err">`</span><span class="p">,</span> <span class="n">found</span> <span class="n">integer</span>
</code></pre></div></div>

<p>So how do we <strong>insert multiple value types</strong> in a <code class="language-plaintext highlighter-rouge">HashMap</code>? We have several options, each of them with its own trade-offs.</p>

<h2 id="option-1-use-an-enum">Option #1: Use an <code class="language-plaintext highlighter-rouge">enum</code></h2>

<p>We can define our own <a href="https://doc.rust-lang.org/std/keyword.enum.html" rel="external"><code class="language-plaintext highlighter-rouge">enum</code></a> to model our value type, and insert that into the hashmap:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="nn">collections</span><span class="p">::</span><span class="n">HashMap</span><span class="p">;</span>

<span class="nd">#[derive(Debug)]</span>
<span class="k">enum</span> <span class="n">Value</span> <span class="p">{</span>
    <span class="nf">Str</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">'static</span> <span class="nb">str</span><span class="p">),</span>
    <span class="nf">Int</span><span class="p">(</span><span class="nb">i32</span><span class="p">),</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">map</span> <span class="o">=</span> <span class="nn">HashMap</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>

    <span class="n">map</span><span class="nf">.insert</span><span class="p">(</span><span class="s">"a"</span><span class="p">,</span> <span class="nn">Value</span><span class="p">::</span><span class="nf">Str</span><span class="p">(</span><span class="s">"1"</span><span class="p">));</span>
    <span class="n">map</span><span class="nf">.insert</span><span class="p">(</span><span class="s">"b"</span><span class="p">,</span> <span class="nn">Value</span><span class="p">::</span><span class="nf">Int</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="n">in</span> <span class="o">&amp;</span><span class="n">map</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"{}: {:?}"</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This prints:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="p">:</span> <span class="nf">Str</span><span class="p">(</span><span class="s">"1"</span><span class="p">)</span>
<span class="n">b</span><span class="p">:</span> <span class="nf">Int</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<p>This is similar to a <a href="https://doc.rust-lang.org/reference/items/unions.html" rel="external">union type</a>. By inserting values of type <code class="language-plaintext highlighter-rouge">Value::*</code>, we are effectively saying that the map can accept types that are either string, integer, or any other composite type we wish to add.</p>

<h2 id="option-2-use-a-box">Option #2: Use a <code class="language-plaintext highlighter-rouge">Box</code></h2>

<p>We can wrap our types in the <a href="https://doc.rust-lang.org/std/boxed/struct.Box.html" rel="external" title="std::boxed::Box"><code class="language-plaintext highlighter-rouge">Box</code></a> struct:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="nn">collections</span><span class="p">::</span><span class="n">HashMap</span><span class="p">;</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">map</span> <span class="o">=</span> <span class="nn">HashMap</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>

    <span class="n">map</span><span class="nf">.insert</span><span class="p">(</span><span class="s">"a"</span><span class="p">,</span> <span class="nn">Box</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="s">"1"</span><span class="p">));</span>
    <span class="n">map</span><span class="nf">.insert</span><span class="p">(</span><span class="s">"b"</span><span class="p">,</span> <span class="nn">Box</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="n">in</span> <span class="o">&amp;</span><span class="n">map</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"{}: {}"</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This doesn’t compile right away. If we try to run this, we get a “mismatched types” error:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">error</span><span class="p">[</span><span class="n">E0308</span><span class="p">]:</span> <span class="n">mismatched</span> <span class="n">types</span>
<span class="o">-</span><span class="k">-&gt;</span> <span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="py">.rs</span>

    <span class="n">map</span><span class="nf">.insert</span><span class="p">(</span><span class="s">"b"</span><span class="p">,</span> <span class="nn">Box</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
                             <span class="o">^</span> <span class="n">expected</span> <span class="err">`</span><span class="o">&amp;</span><span class="nb">str</span><span class="err">`</span><span class="p">,</span> <span class="n">found</span> <span class="n">integer</span>
</code></pre></div></div>

<p>Luckily we can fix this by explicitly declaring the type of our map:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="k">mut</span> <span class="n">map</span><span class="p">:</span> <span class="n">HashMap</span><span class="o">&lt;&amp;</span><span class="nb">str</span><span class="p">,</span> <span class="nb">Box</span><span class="o">&lt;</span><span class="n">dyn</span> <span class="n">Display</span> <span class="o">+</span> <span class="nv">'static</span><span class="o">&gt;&gt;</span> <span class="o">=</span> <span class="nn">HashMap</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>
</code></pre></div></div>

<p>This works because we are actually storing instances of <code class="language-plaintext highlighter-rouge">Box</code>, not primitive types; <code class="language-plaintext highlighter-rouge">dyn Display</code> means the type of the <em>trait object</em> <code class="language-plaintext highlighter-rouge">Display</code>. In this case, <code class="language-plaintext highlighter-rouge">Display</code> happens to be a common trait between <code class="language-plaintext highlighter-rouge">&amp;str</code> and <code class="language-plaintext highlighter-rouge">i32</code>.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="nn">collections</span><span class="p">::</span><span class="n">HashMap</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="nn">fmt</span><span class="p">::</span><span class="n">Display</span><span class="p">;</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">map</span><span class="p">:</span> <span class="n">HashMap</span><span class="o">&lt;&amp;</span><span class="nb">str</span><span class="p">,</span> <span class="nb">Box</span><span class="o">&lt;</span><span class="n">dyn</span> <span class="n">Display</span> <span class="o">+</span> <span class="nv">'static</span><span class="o">&gt;&gt;</span> <span class="o">=</span> <span class="nn">HashMap</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>

    <span class="n">map</span><span class="nf">.insert</span><span class="p">(</span><span class="s">"a"</span><span class="p">,</span> <span class="nn">Box</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="s">"1"</span><span class="nf">.to_string</span><span class="p">()));</span>
    <span class="n">map</span><span class="nf">.insert</span><span class="p">(</span><span class="s">"b"</span><span class="p">,</span> <span class="nn">Box</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="n">in</span> <span class="o">&amp;</span><span class="n">map</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"{}: {}"</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>You may wonder what would happen if we were to use the type <code class="language-plaintext highlighter-rouge">dyn Display</code> without the <code class="language-plaintext highlighter-rouge">Box</code> wrapper. If we try that, we’d get this nasty error:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>error[E0277]: the size for values of type `(dyn std::fmt::Display + 'static)` cannot be known at compilation time
   --&gt; src/main.rs

     let mut map: HashMap&lt;&amp;str, (dyn Display + 'static)&gt; = HashMap::new();
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time

    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::fmt::Display + 'static)`
    = note: to learn more, visit &lt;https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;
    = note: required by `std::collections::HashMap
</code></pre></div></div>

<p>This error may be confusing at first, but it actually makes sense. <a href="https://doc.rust-lang.org/book/" rel="external">The Rust Programming Language book</a> explains this very well in the <a href="https://doc.rust-lang.org/book/ch19-04-advanced-types.html" rel="external">Advanced Types</a> chapter:</p>

<blockquote>
  <p>“Rust needs to know how much memory to allocate for any value of a particular type, and all values of a type must use the same amount of memory.”</p>
</blockquote>

<p>The <code class="language-plaintext highlighter-rouge">Box&lt;T&gt;</code> type is a <a href="https://doc.rust-lang.org/reference/types/pointer.html" rel="external"><em>pointer type</em></a>. It lets us allocate data on the heap rather than the stack, and keeps a reference to the data in the stack in the form of a pointer, which is of fixed size.</p>

<h2 id="not-an-option-3-use-separate-maps-for-each-type">(Not an) Option #3: Use separate maps for each type</h2>

<p>Here we’re not actually using a <code class="language-plaintext highlighter-rouge">HashMap</code> with separate types, but rather two maps, each with its own type. It’s a bit more verbose and perhaps not the solution you’re looking for, but it’s worth keeping in mind that this works too:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="nn">collections</span><span class="p">::</span><span class="n">HashMap</span><span class="p">;</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">strings_map</span> <span class="o">=</span> <span class="nn">HashMap</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">integers_map</span> <span class="o">=</span> <span class="nn">HashMap</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>

    <span class="n">strings_map</span><span class="nf">.insert</span><span class="p">(</span><span class="s">"a"</span><span class="p">,</span> <span class="s">"1"</span><span class="p">);</span>
    <span class="n">integers_map</span><span class="nf">.insert</span><span class="p">(</span><span class="s">"b"</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="n">in</span> <span class="o">&amp;</span><span class="n">strings_map</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"{}: {}"</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="n">in</span> <span class="o">&amp;</span><span class="n">integers_map</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"{}: {}"</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>It feels much simpler! And the output is naturally the same:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="p">:</span> <span class="mi">1</span>
<span class="n">b</span><span class="p">:</span> <span class="mi">2</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>Rust is very strict when it comes to polymorphic types. As you’ve seen, there are ways to achieve it, but they don’t feel as straightforward as with other dynamic languages such as Ruby or Python. Sometimes though it’s useful to make one step back and look at the actual problem we’re trying to solve. Once I did that, I realized that I didn’t necessarily have to limit myself to a single data structure, so I went for the last option.</p>

<p>I’m still a beginner with Rust, so I might have missed on a better solution. <a href="https://doc.rust-lang.org/book/ch17-02-trait-objects.html" rel="external">Trait Objects</a> could be one: I’ve experimented with them, but they weren’t quite was I was looking for. If you have any suggestions or know of other possible solutions, feel free to comment below!</p>

<hr />

<p><strong>Update</strong>: <a href="https://twitter.com/alilleybrinker/status/1280185393258926088" rel="external">@alilleybrinker</a> on Twitter pointed out two caveats to be aware of. One is about the meaning of the <code class="language-plaintext highlighter-rouge">'static</code> <em>bound</em>: when used on a generic type, any references inside the type must live as long as <code class="language-plaintext highlighter-rouge">'static</code>. However, by adding <code class="language-plaintext highlighter-rouge">'static</code> we are also effectively saying that the values inside the <code class="language-plaintext highlighter-rouge">Box</code> won’t contain references. The other caveat is that, when using <code class="language-plaintext highlighter-rouge">dyn Display</code>, the original types are erased, so the available methods are only those known from the <code class="language-plaintext highlighter-rouge">Display</code> trait.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to fix “Untracked working tree would be overwritten by merge” error]]></title>
    <link href="https://www.simonewebdesign.it/how-to-fix-untracked-working-tree-would-be-overwritten-by-merge-error/"/>
    <updated>2020-06-25T00:00:00+01:00</updated>
    <id>https://www.simonewebdesign.it/how-to-fix-untracked-working-tree-would-be-overwritten-by-merge-error</id>
    <content type="html"><![CDATA[<p>Let’s say you have two Git repositories: one on GitHub, and one on your computer.<br />They contain <strong>identical</strong> (or very similar) files, and what you want to do is “synchronize” them (i.e. make them look exactly the same). Maybe all you need is to download a few missing files from GitHub to your computer, or simply push some changes from your machine to GitHub.</p>

<p>You have tried <code class="language-plaintext highlighter-rouge">git pull</code>, but you’re getting this error:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>error: Untracked working tree file * would be overwritten by merge.
fatal: read-tree failed
</code></pre></div></div>

<p>You need the changes, but obviously you don’t want to overwrite or lose any files. Don’t worry, the fix is actually straightforward!</p>

<!--more-->

<h2 id="why-am-i-seeing-this-error">Why am I seeing this error?</h2>

<p>The reason is probably because you didn’t <strong>clone</strong> the repository. In my case, I already had some local files, so instead of running <code class="language-plaintext highlighter-rouge">git clone</code>, here’s what I did:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
git remote add origin git@github.com:&lt;username&gt;/&lt;reponame&gt;.git
</code></pre></div></div>

<p>If you try to <code class="language-plaintext highlighter-rouge">git pull origin &lt;branch-name&gt;</code>, you might get the “untracked working tree” error.</p>

<h2 id="how-do-i-fix-it">How do I fix it?</h2>

<p>If you have already tried pulling from the remote and it didn’t work, <strong>here’s the fix</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch <span class="nt">--track</span> &lt;branch-name&gt; origin/&lt;branch-name&gt;
</code></pre></div></div>

<p>For example, if your branch is named <code class="language-plaintext highlighter-rouge">main</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch <span class="nt">--track</span> main origin/main
</code></pre></div></div>

<p>What this does is simply tell Git that these two branches, <code class="language-plaintext highlighter-rouge">main</code> and <code class="language-plaintext highlighter-rouge">origin/main</code>, are related to each other, and that it should keep track of the changes between them. Turns out it also fixes the error, since Git can now <em>see</em> that nothing would be overwritten.</p>

<h2 id="wait--thats-it">Wait — that’s it?</h2>

<p>Yes! After running the command above, <code class="language-plaintext highlighter-rouge">git status</code> will indeed reveal the differences between the two repositories: your untracked files (i.e. extra files that you only have on your PC) will still be there, and some other files may have been automatically staged for deletion: these are files that are present in the remote repo, but you don’t have locally.</p>

<p>At this point you’ll want to double-check that everything is the way it should be. You may also want to run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git reset
</code></pre></div></div>

<p>To get a clean state. Don’t worry, this won’t delete anything at all, it will simply unstage any modification that was applied automatically by Git. You can stage back the changes you care about using <code class="language-plaintext highlighter-rouge">git add .</code> — once you are happy, you can finally make a commit and run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push
</code></pre></div></div>

<p>Note there’s no need to specify the origin and the branch name anymore, since the two branches (the local and the remote) are now tracked.</p>

<hr />

<p>Hopefully this article helped you fix your issue; either way, feel free to ask for help by leaving a comment below.</p>

<p>Happy hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to enable Dark Mode on macOS with the command line]]></title>
    <link href="https://www.simonewebdesign.it/how-to-enable-dark-mode-macos-command-line/"/>
    <updated>2020-04-28T00:00:00+01:00</updated>
    <id>https://www.simonewebdesign.it/how-to-enable-dark-mode-macos-command-line</id>
    <content type="html"><![CDATA[<p>If you want to toggle between light and dark mode, it can be done with a single shell command:</p>

<div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">osascript</span><span class="w"> </span><span class="o">-</span><span class="nv">e</span><span class="w"> </span><span class="err">'</span><span class="k">tell</span><span class="w"> </span><span class="nv">app</span><span class="w"> </span><span class="s2">"System Events"</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">tell</span><span class="w"> </span><span class="nv">appearance</span><span class="w"> </span><span class="nv">preferences</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">set</span><span class="w"> </span><span class="nv">dark</span><span class="w"> </span><span class="nv">mode</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="ow">not</span><span class="w"> </span><span class="nv">dark</span><span class="w"> </span><span class="nv">mode</span><span class="err">'</span><span class="w">
</span></code></pre></div></div>

<p>Try it and it will switch the mode immediately. No need to restart or install anything.</p>

<!--more-->

<h2 id="how-does-it-work">How does it work?</h2>

<p>It’s <a href="https://en.wikipedia.org/wiki/AppleScript" rel="external">AppleScript</a>. <code class="language-plaintext highlighter-rouge">dark mode</code> is a boolean value in the user defaults system. <code class="language-plaintext highlighter-rouge">not dark mode</code> is the opposite of that value. So, for example, if the value is <code class="language-plaintext highlighter-rouge">true</code>, it’s like saying <code class="language-plaintext highlighter-rouge">not true</code> (i.e. <code class="language-plaintext highlighter-rouge">false</code>), effectively acting like a light switch.</p>

<p>Enjoy the dark!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A pure CSS onclick context menu]]></title>
    <link href="https://www.simonewebdesign.it/pure-css-onclick-context-menu/"/>
    <updated>2019-05-13T00:00:00+01:00</updated>
    <id>https://www.simonewebdesign.it/pure-css-onclick-context-menu</id>
    <content type="html"><![CDATA[<p>
  Context menus are one of those very useful UI widgets that still haven't reached the HTML spec.
  <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contextmenu" rel="external">There have been attempts</a>,
  but for now everyone tends to make their own custom implementation.
</p>

<p>Especially with the advent of React, the tendency is to write a custom menu component that uses JavaScript to open/close itself, perhaps by using an invisible overlay to detect clicks outside the menu and close it accordingly. This works fine in practice, however it doesn't have to be so complicated. If you need a simple <strong>dropdown menu</strong> that:</p>

<ul>
<li>Has no dependencies;
<li>Can be triggered with a click/tap on any element;
<li>Is fully cross-browser;
<li>Doesn't need JavaScript!
</ul>

<p>Then look no further. It's much simpler than you think!</p>

<!--more-->

<h2>An example</h2>

Try clicking this button: <button>☰</button><nav class="menu">
        <ul>
            <li>
                <button onclick="alert('Hello there!')">Display Greeting</button>
            </li>
            <li>
                <button onclick="print()">Print This Page</button>
            </li>
        </ul>
    </nav>

<p>This is done in <strong>pure HTML and CSS</strong>; the JavaScript is there just to add functionality. Source code below.</p>

<h3>The HTML</h3>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;button&gt;</span>☰<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">"menu"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ul&gt;</span>
    <span class="nt">&lt;li&gt;</span>
      <span class="nt">&lt;button</span> <span class="na">onclick=</span><span class="s">"alert('Hello there!')"</span><span class="nt">&gt;</span>
        Display Greeting
      <span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;</span>
      <span class="nt">&lt;button</span> <span class="na">onclick=</span><span class="s">"print()"</span><span class="nt">&gt;</span>
        Print This Page
      <span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/nav&gt;</span></code></pre></figure>

<h3>The CSS</h3>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="nc">.menu</span> <span class="p">{</span>
    <span class="nl">visibility</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">button</span> <span class="o">+</span> <span class="nc">.menu</span><span class="nd">:active</span><span class="o">,</span>
<span class="nt">button</span><span class="nd">:focus</span> <span class="o">+</span> <span class="nc">.menu</span> <span class="p">{</span>
    <span class="nl">visibility</span><span class="p">:</span> <span class="nb">visible</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>That's the trick: we hide the menu in CSS initially, then show it when the button gets focused <em>and</em> while we're clicking on the menu itself. This is necessary so that the click actually gets registered. That's it! <strong>No JS trickery involved.</strong></p>

<p>You can attach event listeners to the menu items, e.g. using <code>onclick</code> or <code>document.addEventListener</code> and they'll work as usual. You may also just use <code>&lt;a&gt;</code> tags instead of buttons, depending on your use case.</a></p>

<p>Naturally the menu can be opened only by elements that can receive focus, such as buttons and anchors. So what about other non-interactive elements? Can we make them focusable too? <strong>The answer is yes!</strong></p>

<h2>A more complicated example</h2>

<p>We want to <strong>display a context menu</strong> when clicking on the following image: <figure class="doge-demo" tabindex="-1">
  <picture class="doge">
    <source type="image/webp" srcset="/images/doge.webp">
    <img src="/images/doge.png" loading="lazy" width="300" height="300" alt="doge meme" title="Click me to open the menu..." />
  </picture>
  <figcaption>wow, this image is clickable!</figcaption>
  <nav class="menu">
    <ul>
      <li>
        <button onclick="alert('Button clicked!')">Open Image in New Tab</button>
      </li>
      <li>
        <button onclick="console.log(1)">Save Image As...</button>
      </li>
      <li>
        <button>Copy Image Address</button>
      </li>
    </ul>
  </nav>
</figure>

<h3>The HTML</h3>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;figure</span> <span class="na">tabindex=</span><span class="s">"-1"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"/images/doge.png"</span> <span class="nt">/&gt;</span>

  <span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">"menu"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
      <span class="nt">&lt;li&gt;</span>
        <span class="nt">&lt;button&gt;</span>Open Image in New Tab<span class="nt">&lt;/button&gt;</span>
      <span class="nt">&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;</span>
        <span class="nt">&lt;button&gt;</span>Save Image As...<span class="nt">&lt;/button&gt;</span>
      <span class="nt">&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;</span>
        <span class="nt">&lt;button&gt;</span>Copy Image Address<span class="nt">&lt;/button&gt;</span>
      <span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;/nav&gt;</span>
<span class="nt">&lt;/figure&gt;</span></code></pre></figure>

<p>The trick here was to add <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex" rel="external"><code>tabindex</code></a>. This makes the element focusable, so that it can open the menu on click. Note that if the clickable element is a <code>&lt;button&gt;</code> or other <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#Interactive_content" rel="external">interactive content</a> (i.e. any focusable element), then you don't even need this!</p>

<p>I've used a <code>&lt;figure&gt;</code>, but you can use any element you like. Just add <code>tabindex="-1"</code> to make it focusable, if it isn't already. You can place the menu anywhere you want in the HTML, as long as you're able to target it with a CSS selector. Just try not to put a button in a button as that's invalid HTML, although technically it will still work.</p>

<h3>The CSS</h3>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="nc">.menu</span> <span class="p">{</span>
    <span class="nl">visibility</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">figure</span><span class="nd">:active</span> <span class="nc">.menu</span><span class="o">,</span>
<span class="nt">figure</span><span class="nd">:focus</span> <span class="nc">.menu</span> <span class="p">{</span>
    <span class="nl">visibility</span><span class="p">:</span> <span class="nb">visible</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<h3>How do I make the menu appear next to the mouse cursor?</h3>

<p>You'll need JavaScript, but it's entirely up to you whether you want to do this. Alternatively you could add <code>position: absolute</code> to the menu and <strong>just make it appear below (or next to) the element you clicked</strong> — no need for JS in this case! Anyway, this did the trick for me:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">const</span> <span class="nx">img</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">.doge</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">menu</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">.menu</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">img</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">mousedown</span><span class="dl">'</span><span class="p">,</span> <span class="p">({</span> <span class="nx">offsetX</span><span class="p">,</span> <span class="nx">offsetY</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">menu</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span> <span class="o">=</span> <span class="nx">offsetY</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">px</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">menu</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="nx">offsetX</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">px</span><span class="dl">'</span><span class="p">;</span>
<span class="p">});</span></code></pre></figure>

<h3>I want the menu to close when I click the button again!</h3>

<p>If that's the case, you'll probably be better off using the old <a href="https://css-tricks.com/the-checkbox-hack/" rel="external">checkbox hack</a>.</p>

<h3>A note about accessibility</h3>

<p>Accessibility isn't the main focus of this article, but an important topic nonetheless. Menu items <strong>should be navigatable with a keyboard</strong>: this requires JS, but it's not hard to achieve. The <abbr title="World Wide Web Consortium">W3C</abbr> has done a lot of work around accessibility and there's plenty of examples you can refer to on their site: for instance, I think the <a href="https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/menu-button/menu-button-links.html" rel="external">menu button example</a> is particularly relevant.</p>

<h3>What about browser support?</h3>

<p>It may not work in some very old browsers, so make sure to test it in the browsers you need to support. <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Clicking_and_focus" rel="external">This MDN page</a> has some info about what happens to the focus of a button when being clicked/tapped on different platforms. I did some tests myself and it seems to work well everywhere, including IE and mobile browsers.</p>

<p><b>Update:</b> this blog post received a lot of attention and a few folks reached out to me about an issue, specifically with Safari and Firefox, on both iOS and macOS: the button won't focus. No worries though, it only affects buttons; other tags will work just fine. You may consider using <code>&lt;span tabindex=0&gt;</code> — the semantic meaning is lost entirely here, so if you really want to use a button, you can always focus it programmatically via JS, but <em>only</em> on Apple devices — for example:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="k">if</span> <span class="p">(</span>
  <span class="sr">/apple/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nb">navigator</span><span class="p">.</span><span class="nx">vendor</span><span class="p">)</span> <span class="o">||</span>
  <span class="sr">/Mac.*Firefox/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nb">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">)</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">button</span><span class="dl">'</span><span class="p">);</span>

  <span class="nx">button</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="nx">event</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">}</span></code></pre></figure>

<p>Another issue you may find specific to Apple is that the menu won't close when tapping outside of it. There's an easy fix: simply add <code>tabindex="-1"</code> to the container or the body tag.</p>

<hr>

<p>And that's it! I hope you found this useful. If you spot any issues, please do let me know!</p>

<script>
const img = document.querySelector('.doge');
const menu = document.querySelector('.doge-demo .menu');

img.addEventListener('mousedown', function (event) {
    const { offsetX, offsetY } = event;
    menu.style.top = offsetY + 'px';
    menu.style.left = offsetX + 'px';
});

if (
    /apple/i.test(navigator.vendor) ||
    /Mac.*Firefox/.test(navigator.userAgent)
) {
    document.querySelector('h2 + button').addEventListener('click', function (event) {
        event.target.focus();
    });
}

</script>


<style>
.entry-content h2 code { background: rgba(0, 0, 0, 0.05); padding: 0.1rem 0.2rem; border-radius: 4px; }

.entry-content .doge-demo { position: relative; width: 306px; margin: 0 auto; outline: none; }

.entry-content .doge-demo:active .menu, .entry-content .doge-demo:focus .menu { visibility: visible; }

.entry-content .doge-demo img { margin-bottom: 0.5rem !important; border: 2px solid transparent; outline: 1px solid rgba(0, 0, 0, 0.5); cursor: pointer; }

.entry-content .doge-demo img:active, .entry-content .doge-demo img:focus { border: 2px solid green; }

.entry-content .doge-demo figcaption { text-align: center; background: rgba(0, 0, 0, 0.05); width: 306px; margin: 0 auto; margin-top: -11px; margin-left: -1px; font-size: 0.9rem; color: rgba(255, 255, 255, 0.96); background-color: rgba(0, 0, 0, 0.7); }

.entry-content .doge-demo .menu { position: absolute; top: 0; left: 0; min-width: 14rem; }

.entry-content .menu { visibility: hidden; background: white; border-radius: 4px; border: 1px solid #dedede; }

.entry-content .menu > ul { list-style: none; margin: 0.4rem 0; }

.entry-content .menu > ul > li { padding: 0; }

.entry-content .menu > ul > li > button { padding: 0.2rem 0.8rem; width: 100%; font-size: 1rem; -webkit-appearance: button; -moz-appearance: button; text-transform: none; font-family: inherit; font-size: 100%; line-height: 1.15; margin: 0; overflow: visible; border: 0; text-align: left; font-family: Arial, Verdana, sans-serif; outline: none; cursor: pointer; background: transparent; }

.entry-content .menu > ul > li > button:hover { background: rgba(0, 0, 0, 0.04); }

.entry-content .menu > ul > li > button:active, .entry-content .menu > ul > li > button:focus { background: rgba(0, 0, 0, 0.08); }

.entry-content button + .menu { display: inline-block; position: absolute; }

.entry-content button + .menu:active { visibility: visible; }

.entry-content button:focus + .menu { visibility: visible; }

</style>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't stop learning]]></title>
    <link href="https://www.simonewebdesign.it/dont-stop-learning/"/>
    <updated>2018-02-21T00:00:00+00:00</updated>
    <id>https://www.simonewebdesign.it/dont-stop-learning</id>
    <content type="html"><![CDATA[<p>Back in the days, when I got serious about becoming a "real programmer", I decided I wanted to learn Java.</p>

<p>I didn’t know anything about OOP, Design Patterns, Single Responsibility… all I knew was some PHP, Visual Basic, and database design stuff. That was it.</p>

<p>So I went to a book store and I bought this book about Object-Oriented Programming in Java 6. It was a massive book, probably around 1000 pages of code and programming best practices, and I read like 80% of it. Some parts were too advanced for me, but I learned a lot.</p>

<p>I used to like Java. I thought, “so this is what real programming looks like, with classes and inheritance. That’s the right way”.</p>

<p>I actually believed this for a while, until that day…</p>

<p>One day I went to this website, projecteuler.net, which is basically a way to prove your skills by solving difficult programming challenges, and learn in the process.</p>

<p>It was years ago, but I remember I solved the first couple exercises pretty easily. The third one was a bit harder. Here’s the original text:</p>

<blockquote>
  <p>A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.</p>
  <p>Find the largest palindrome made from the product of two 3-digit numbers.</p>
</blockquote>

<p><small>Source: <a href="https://projecteuler.net/problem=4">https://projecteuler.net/problem=4</a></small></p>

<p>I spent a few hours on it before coming up with this:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">System</span><span class="o">.</span><span class="na">out</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Euler4</span>
<span class="o">{</span>
  <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">MIN</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
  <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">MAX</span> <span class="o">=</span> <span class="mi">999</span><span class="o">;</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">getPalindromes</span><span class="o">(</span><span class="kt">int</span> <span class="n">min</span><span class="o">,</span> <span class="kt">int</span> <span class="n">max</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">palindromes</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">max</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">min</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span>
    <span class="o">{</span>
      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">max</span><span class="o">;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="n">min</span><span class="o">;</span> <span class="n">j</span><span class="o">--)</span>
      <span class="o">{</span>
        <span class="kt">int</span> <span class="n">product</span> <span class="o">=</span> <span class="n">i</span> <span class="o">*</span> <span class="n">j</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">isPalindrome</span><span class="o">(</span><span class="k">new</span> <span class="nc">Integer</span><span class="o">(</span><span class="n">product</span><span class="o">).</span><span class="na">toString</span><span class="o">()))</span>
          <span class="n">palindromes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">product</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">palindromes</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isPalindrome</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>

    <span class="kt">char</span> <span class="n">firstChar</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
    <span class="kt">char</span> <span class="n">lastChar</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="mi">1</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">firstChar</span> <span class="o">==</span> <span class="n">lastChar</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="nf">isPalindrome</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="mi">1</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getHighestNumber</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="kt">int</span> <span class="n">highestNumber</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">number</span> <span class="o">:</span> <span class="n">numbers</span><span class="o">)</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">number</span> <span class="o">&gt;</span> <span class="n">highestNumber</span><span class="o">)</span>
        <span class="n">highestNumber</span> <span class="o">=</span> <span class="n">number</span><span class="o">;</span>
    <span class="k">return</span> <span class="n">highestNumber</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">palindromes</span> <span class="o">=</span> <span class="n">getPalindromes</span><span class="o">(</span><span class="no">MIN</span><span class="o">,</span> <span class="no">MAX</span><span class="o">);</span>
    <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getHighestNumber</span><span class="o">(</span><span class="n">palindromes</span><span class="o">));</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>It’s 46 lines of code, without counting blank lines. Not too bad, right?</p>

<p>Ok, don’t be mean. I know that’s probably shitty code, but it was my own solution and I was quite proud of it.</p>

<p>Now, when you finish a challenge successfully, you’re given access to the forum, where other programmers post their own solutions in many different languages.</p>

<p>That’s where I first discovered <a href="/ruby-is-magic/">Ruby</a>.</p>

<p>I was reading the thread about the problem I just solved, when I stumbled across this Ruby solution:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">m</span> <span class="o">=</span> <span class="mi">0</span>
<span class="mi">901</span><span class="p">.</span><span class="nf">upto</span><span class="p">(</span><span class="mi">999</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="o">|</span>
  <span class="mi">901</span><span class="p">.</span><span class="nf">upto</span><span class="p">(</span><span class="mi">999</span><span class="p">){</span><span class="o">|</span><span class="n">b</span><span class="o">|</span>
    <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="p">).</span><span class="nf">to_s</span>
    <span class="n">m</span> <span class="o">=</span> <span class="p">[</span><span class="n">m</span><span class="p">,</span> <span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="p">].</span><span class="nf">max</span> <span class="k">if</span> <span class="n">s</span> <span class="o">==</span> <span class="n">s</span><span class="p">.</span><span class="nf">reverse</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nb">puts</span> <span class="n">m</span>
</code></pre></div></div>

<p>And I was like, “wow, seriously? Only 8 lines of code?”.</p>

<p>I couldn’t believe my eyes. I was staring at something marvelous; some beauty that I never came across before.</p>

<p>Ruby is an object-oriented programming language that focuses on expressiveness and readability.</p>

<p>It was love at first sight. I started reading about this amazing language, about the fact that everything in Ruby is an object, even integers, and that you can write code like <code class="language-plaintext highlighter-rouge">3.times { print "Hello" }</code> to simply print “Hello” 3 times. It was like reading English, and I felt truly amazed, humbled, and inspired.</p>

<hr />

<p>Anyway, that’s just part of my story about becoming a better programmer. I’m not sure what the point is, I just felt like writing it down. But if, like me, you’re one of those people that need some ‘takeaway’ from a story, I guess it should be this:</p>

<blockquote>
  <p>Just don't stop learning, ever.</p>
  <p>Keep on learning and practicing, and you too will discover beautiful things.</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Pipeable Logger]]></title>
    <link href="https://www.simonewebdesign.it/a-pipeable-logger/"/>
    <updated>2017-04-03T00:00:00+01:00</updated>
    <id>https://www.simonewebdesign.it/a-pipeable-logger</id>
    <content type="html"><![CDATA[<p>The Elixir Logger is pretty good. You can easily log anything with it, just call one of <code class="language-plaintext highlighter-rouge">debug</code>, <code class="language-plaintext highlighter-rouge">info</code>, <code class="language-plaintext highlighter-rouge">warn</code> or <code class="language-plaintext highlighter-rouge">error</code>. For example:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">"something happened"</span><span class="p">)</span>
</code></pre></div></div>

<p>Turns into:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>12:34:56.789 [info]  something happened
</code></pre></div></div>

<p>Very nice. However, there are cases where you may want to, say, change some data structure, like update a map or a list, and then log the transition, <strong>without breaking the pipe</strong>. Example:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="n">my_function</span> <span class="k">do</span>
  <span class="n">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>

  <span class="n">list</span>
  <span class="o">|&gt;</span> <span class="no">Logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s2">"before insert: </span><span class="si">#{</span><span class="n">inspect</span> <span class="n">list</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
  <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">into</span><span class="p">([</span><span class="mi">0</span><span class="p">])</span>
  <span class="o">|&gt;</span> <span class="no">Logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s2">"after insert: </span><span class="si">#{</span><span class="n">inspect</span> <span class="n">list</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This doesn’t work for many reasons. First, we can’t refer to <code class="language-plaintext highlighter-rouge">list</code> that way. If we do, we will always be logging <code class="language-plaintext highlighter-rouge">[1, 2, 3]</code>, because Elixir’s data structures are immutable.
Second, <code class="language-plaintext highlighter-rouge">Logger.*</code> functions return the <code class="language-plaintext highlighter-rouge">:ok</code> atom, which means you can’t use them in a pipe—unless that is what you want to return.</p>

<p>The solution to both issues is actually pretty straightforward: use a lambda!
A lambda is just an anonymous function. We can define it and call it right away. So the code above becomes:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="n">my_function</span> <span class="k">do</span>
  <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
  <span class="o">|&gt;</span> <span class="p">(</span><span class="k">fn</span> <span class="n">list</span> <span class="o">-&gt;</span>
    <span class="no">Logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s2">"before insert: </span><span class="si">#{</span><span class="n">inspect</span> <span class="n">list</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
    <span class="n">list</span>
  <span class="k">end</span><span class="p">)</span><span class="o">.</span><span class="p">()</span>
  <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">into</span><span class="p">([</span><span class="mi">0</span><span class="p">])</span>
  <span class="o">|&gt;</span> <span class="p">(</span><span class="k">fn</span> <span class="n">list</span> <span class="o">-&gt;</span>
    <span class="no">Logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s2">"after insert: </span><span class="si">#{</span><span class="n">inspect</span> <span class="n">list</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
    <span class="n">list</span>
  <span class="k">end</span><span class="p">)</span><span class="o">.</span><span class="p">()</span>
<span class="k">end</span>
</code></pre></div></div>

<p>If we call this function, we get:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>12:34:56.789 [debug] before insert: [1, 2, 3]

12:34:56.823 [debug] after insert: [0, 1, 2, 3]
</code></pre></div></div>

<p>Great, exactly what we want! Except the syntax is horrible. But fear not, we can improve on it. How about we make a wrapper?</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">PipeableLogger</span> <span class="k">do</span>
  <span class="kn">require</span> <span class="no">Logger</span>

  <span class="k">def</span> <span class="n">debug</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">msg</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">Logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
    <span class="n">data</span>
  <span class="k">end</span>

  <span class="c1"># def warn, do: ...</span>
  <span class="c1"># def error, do: ...</span>
  <span class="c1"># def info, do: ...</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Let’s rewrite our function once again:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="n">my_function</span> <span class="k">do</span>
  <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
  <span class="o">|&gt;</span> <span class="p">(</span><span class="o">&amp;</span><span class="no">PipeableLogger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="nv">&amp;1</span><span class="p">,</span> <span class="s2">"before insert: </span><span class="si">#{</span><span class="n">inspect</span> <span class="nv">&amp;1</span><span class="si">}</span><span class="s2">"</span><span class="p">))</span><span class="o">.</span><span class="p">()</span>
  <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">into</span><span class="p">([</span><span class="mi">0</span><span class="p">])</span>
  <span class="o">|&gt;</span> <span class="p">(</span><span class="o">&amp;</span><span class="no">PipeableLogger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="nv">&amp;1</span><span class="p">,</span> <span class="s2">"after insert: </span><span class="si">#{</span><span class="n">inspect</span> <span class="nv">&amp;1</span><span class="si">}</span><span class="s2">"</span><span class="p">))</span><span class="o">.</span><span class="p">()</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Still not pretty though, as we still needed to wrap the function in a lambda. If we want to build a proper <code class="language-plaintext highlighter-rouge">Logger</code> wrapper, there are at least two different cases we may want to handle:</p>

<ol>
  <li>Logging a simple message (without any data);</li>
  <li>Logging the data we receive from the pipe, maybe also with a message.</li>
</ol>

<p>Here’s the improved version of <code class="language-plaintext highlighter-rouge">PipeableLogger</code>:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">PipeableLogger</span> <span class="k">do</span>
  <span class="kn">require</span> <span class="no">Logger</span>

  <span class="k">def</span> <span class="n">debug</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">msg</span> <span class="p">\\</span> <span class="s2">""</span><span class="p">,</span> <span class="n">metadata</span> <span class="p">\\</span> <span class="p">[])</span>
  <span class="k">def</span> <span class="n">debug</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="n">metadata</span><span class="p">)</span> <span class="ow">when</span> <span class="n">msg</span> <span class="o">==</span> <span class="s2">""</span><span class="p">,</span> <span class="k">do</span><span class="p">:</span> <span class="no">Logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">metadata</span><span class="p">)</span>
  <span class="k">def</span> <span class="n">debug</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="n">metadata</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">Logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="n">metadata</span><span class="p">)</span>
    <span class="n">data</span>
  <span class="k">end</span>

  <span class="c1"># def warn, do: ...</span>
  <span class="c1"># def error, do: ...</span>
  <span class="c1"># def info, do: ...</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Let’s use it:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="n">my_function</span> <span class="k">do</span>
  <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
  <span class="o">|&gt;</span> <span class="no">PipeableLogger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s2">"before insert"</span><span class="p">)</span>
  <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">into</span><span class="p">([</span><span class="mi">0</span><span class="p">])</span>
  <span class="o">|&gt;</span> <span class="no">PipeableLogger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s2">"after insert"</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Much, much simpler! The only problem now is, we’re logging just a message. What if we want to log the data? It’s a lambda all over again.</p>

<p>Here’s the final version I came up with:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">PipeableLogger</span> <span class="k">do</span>
  <span class="kn">require</span> <span class="no">Logger</span>

  <span class="k">def</span> <span class="n">debug</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">msg</span> <span class="p">\\</span> <span class="s2">""</span><span class="p">,</span> <span class="n">metadata</span> <span class="p">\\</span> <span class="p">[])</span>
  <span class="k">def</span> <span class="n">debug</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="n">metadata</span><span class="p">)</span> <span class="ow">when</span> <span class="n">msg</span> <span class="o">==</span> <span class="s2">""</span><span class="p">,</span> <span class="k">do</span><span class="p">:</span> <span class="no">Logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">metadata</span><span class="p">)</span>
  <span class="k">def</span> <span class="n">debug</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="n">metadata</span><span class="p">)</span> <span class="ow">when</span> <span class="n">is_binary</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">Logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="n">msg</span> <span class="o">&lt;&gt;</span> <span class="n">data</span><span class="p">,</span> <span class="n">metadata</span><span class="p">)</span>
    <span class="n">data</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="n">debug</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="n">metadata</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">Logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="n">msg</span> <span class="o">&lt;&gt;</span> <span class="n">inspect</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">metadata</span><span class="p">)</span>
    <span class="n">data</span>
  <span class="k">end</span>

  <span class="c1"># def warn, do: ...</span>
  <span class="c1"># def error, do: ...</span>
  <span class="c1"># def info, do: ...</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The assumption is that we always want to concatenate the data with the message, which is fair enough I think. Let’s see it in action:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="n">my_function</span> <span class="k">do</span>
  <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
  <span class="o">|&gt;</span> <span class="no">PipeableLogger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s2">"before insert: "</span><span class="p">)</span>
  <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">into</span><span class="p">([</span><span class="mi">0</span><span class="p">])</span>
  <span class="o">|&gt;</span> <span class="no">PipeableLogger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s2">"after insert: "</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="o">&gt;</span> <span class="n">my_function</span><span class="p">()</span>

<span class="mi">12</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mf">56.789</span> <span class="p">[</span><span class="n">debug</span><span class="p">]</span> <span class="n">before</span> <span class="ss">insert:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>

<span class="mi">12</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mf">56.789</span> <span class="p">[</span><span class="n">debug</span><span class="p">]</span> <span class="k">after</span> <span class="ss">insert:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</code></pre></div></div>

<p>Now we can log the data with a message, all in a pipe and without a lambda! Nice!</p>

<hr />

<p>Summing up, I’m not convinced a <code class="language-plaintext highlighter-rouge">Logger</code> wrapper is the right way. This kinda goes against the blog post, but to be fair I think Elixir people tend to use pipes way too much (I’m guilty as well). So I wouldn’t probably wrap <code class="language-plaintext highlighter-rouge">Logger</code> in any project.</p>

<p>It’s also worth noting that <code class="language-plaintext highlighter-rouge">Logger</code> supports the concept of metadata, which basically means you can already attach any data you want. For example, if you put this in your <code class="language-plaintext highlighter-rouge">config.exs</code>:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">config</span> <span class="ss">:logger</span><span class="p">,</span> <span class="ss">:console</span><span class="p">,</span>
  <span class="ss">metadata:</span> <span class="p">[</span><span class="ss">:my_list</span><span class="p">]</span>
</code></pre></div></div>

<p>You can then call <code class="language-plaintext highlighter-rouge">Logger</code> like this:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&gt;</span> <span class="kn">require</span> <span class="no">Logger</span>
<span class="no">Logger</span>

<span class="n">iex</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Logger</span><span class="o">.</span><span class="n">info</span> <span class="s2">"Work done"</span><span class="p">,</span> <span class="ss">my_list:</span> <span class="n">inspect</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>

<span class="mi">12</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span><span class="mf">56.789</span> <span class="n">my_list</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="p">[</span><span class="n">info</span><span class="p">]</span>  <span class="no">Work</span> <span class="n">done</span>
<span class="ss">:ok</span>
</code></pre></div></div>

<p>Point is, you don’t need a wrapper if all you want is concatenate some data in the log message. You <em>do</em> need a wrapper though (or a lambda) if you want to use <code class="language-plaintext highlighter-rouge">Logger</code> in a pipe.</p>

<p>So how about this instead?</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="n">my_function</span> <span class="k">do</span>
  <span class="n">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
  <span class="no">Logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s2">"before insert: </span><span class="si">#{</span><span class="n">inspect</span> <span class="n">list</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
  <span class="n">new_list</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">into</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">])</span>
  <span class="no">Logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s2">"after insert: </span><span class="si">#{</span><span class="n">inspect</span> <span class="n">new_list</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p><strong>Simple is better</strong>. It’s fine to break that pipe every once in a while!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursive Reduce in JavaScript and Clojure]]></title>
    <link href="https://www.simonewebdesign.it/recursive-reduce-in-javascript-and-clojure/"/>
    <updated>2016-07-26T14:00:00+01:00</updated>
    <id>https://www.simonewebdesign.it/recursive-reduce-in-javascript-and-clojure</id>
    <content type="html"><![CDATA[<p>Another fun kata:</p>

<blockquote>
  <p>Given an array of arbitrarily nested objects, return a flat array with all the objects marked as “good”.</p>
</blockquote>

<p>The definition above is quite generic, so I’ll provide examples to show
exactly what I mean.</p>

<p>The array in JavaScript looks like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">items</span> <span class="o">=</span> <span class="p">[{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="na">good</span><span class="p">:</span> <span class="kc">true</span>
<span class="p">},</span> <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="na">children</span><span class="p">:</span> <span class="p">[{</span>
        <span class="na">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
        <span class="na">good</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">},</span> <span class="p">{</span>
        <span class="na">id</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
        <span class="na">good</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">},</span> <span class="p">{</span>
        <span class="na">id</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
        <span class="na">children</span><span class="p">:</span> <span class="p">[{</span>
                <span class="na">id</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
                <span class="na">good</span><span class="p">:</span> <span class="kc">true</span>
            <span class="p">}</span>
            <span class="p">...</span>
        <span class="p">]</span>
    <span class="p">},</span> <span class="p">{</span>
        <span class="na">id</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span>
        <span class="na">children</span><span class="p">:</span> <span class="p">[...]</span>
    <span class="p">},</span> <span class="p">...]</span>
<span class="p">},</span> <span class="p">...]</span>
</code></pre></div></div>

<p>We want the IDs of the good ones.</p>

<p>You might have noticed not all objects are “good”. Number 2 for example
is not good. So the result in this case should be:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</code></pre></div></div>

<p>The only thing to notice here is that <strong>you know it’s not good because
it’s not marked as such.</strong> In other words, when some object is “bad”,
there’s no <code class="language-plaintext highlighter-rouge">good: false</code> nor <code class="language-plaintext highlighter-rouge">bad: true</code> that tells you that.</p>

<p>So how do we solve this challenge?</p>

<p>Since there’s an arbitrary nesting depth, we can once again leverage the
power and simplicity of recursion.</p>

<h2 id="solution-in-javascript">Solution in JavaScript</h2>

<p>I’ve created the function <code class="language-plaintext highlighter-rouge">goodOnes(items)</code> that takes the input and
returns what we expect. I’m also using <a href="https://github.com/ramda/ramda">Ramda.js</a>, just because I wanted a clean functional solution and I didn’t want to mess around
object mutation.</p>

<p>Here it is:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">goodOnes</span><span class="p">(</span><span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">R</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">theGoodOne</span><span class="p">,</span> <span class="p">[],</span> <span class="nx">items</span><span class="p">);</span>

  <span class="kd">function</span> <span class="nx">theGoodOne</span><span class="p">(</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">good</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">acc</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">children</span> <span class="o">&amp;&amp;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">R</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">theGoodOne</span><span class="p">,</span> <span class="nx">acc</span><span class="p">,</span> <span class="nx">item</span><span class="p">.</span><span class="nx">children</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">acc</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>As a side note, you don’t really have to use Ramda.js.
<code class="language-plaintext highlighter-rouge">Array.prototype.reduce</code> does the same, although in a less elegant way.</p>

<h3 id="explanation">Explanation</h3>

<p>What this function does is basically just <strong>collecting values</strong>. The
starting point is an empty array, you can see that as the second
argument in the first line. <code class="language-plaintext highlighter-rouge">theGoodOne</code> is another function (a closure,
to be specific) that is implicitly taking two arguments: <code class="language-plaintext highlighter-rouge">acc</code> (the
<em>accumulator</em>, the empty array) and <code class="language-plaintext highlighter-rouge">item</code> (the current item in the loop).</p>

<p>If the item is good, we return a <strong>new array</strong> with the item’s ID.
Otherwise, we return the accumulator. However, if the item happens to
have some children, we start over doing the same thing (i.e. looping
over its children), also keeping track of the accumulator we already
have this time. It might be still empty, but we don’t care yet. We just
return it at the very end.</p>

<p>Now, you might have noticed a bug: what happens if the item is good, but also
has children? … Yes, that item will be discarded! I did it on purpose
by the way. When I made this function, the original array of items never
had any good item <em>with</em> children. Only good items, or items with children.
The algorithm is reflecting this, so it’s technically not a bug.</p>

<p>If you’re curious about what’s the original intent behind this function, it is to
collect values from an <strong>infinitely nestable architecture of UI components</strong>.
There are <em>text</em> components, <em>number</em> components, <em>datepickers</em> etc…
those are all part of a category called <em>fields</em>. There are also
<em>wrappers</em>, that could be for example a <em>fieldset</em> or a <em>grid</em>. Wrappers can
contain fields, but also other wrappers.</p>

<p>So what if you have such data structure with so many components and all
you need is just an array of fields? Simple, just <strong>reduce recursively</strong>
on it! ;)</p>

<p>More in general, you can use the <strong>recursive reduce</strong> whenever you have
a nested data structure (such as an array of arrays) and you want to get something out of it.</p>

<h2 id="solution-in-clojure">Solution in Clojure</h2>

<p>This <strong>recursive solution</strong> follows the same logic as the JavaScript
one, but somehow it feels superior. It could probably be rewritten in a
more elegant way I guess, but I’m not very experienced with Clojure so
here we go:</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">defn</span><span class="w"> </span><span class="n">good-one</span><span class="w"> </span><span class="p">[</span><span class="n">acc</span><span class="w"> </span><span class="n">item</span><span class="p">]</span><span class="w">
  </span><span class="p">(</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="nf">item</span><span class="w"> </span><span class="no">:good</span><span class="p">)</span><span class="w">
    </span><span class="p">(</span><span class="nb">conj</span><span class="w"> </span><span class="n">acc</span><span class="w"> </span><span class="p">(</span><span class="nf">item</span><span class="w"> </span><span class="no">:id</span><span class="p">))</span><span class="w">
    </span><span class="p">(</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="nb">seq</span><span class="w"> </span><span class="p">(</span><span class="nf">item</span><span class="w"> </span><span class="no">:children</span><span class="p">))</span><span class="w">
      </span><span class="p">(</span><span class="nb">reduce</span><span class="w"> </span><span class="n">good-one</span><span class="w"> </span><span class="n">acc</span><span class="w"> </span><span class="p">(</span><span class="nf">item</span><span class="w"> </span><span class="no">:children</span><span class="p">))</span><span class="w">
      </span><span class="n">acc</span><span class="p">)))</span><span class="w">

</span><span class="p">(</span><span class="k">defn</span><span class="w"> </span><span class="n">good-ones</span><span class="w"> </span><span class="p">[</span><span class="n">collection</span><span class="p">]</span><span class="w">
  </span><span class="p">(</span><span class="nb">reduce</span><span class="w"> </span><span class="n">good-one</span><span class="w"> </span><span class="p">[]</span><span class="w"> </span><span class="n">collection</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<h2 id="demo--download">Demo &amp; Download</h2>

<p>Everything is on GitHub if you want to fiddle around – just follow the instructions to get the demos up and running on your computer.</p>

<ul>
  <li>JavaScript <a href="https://github.com/simonewebdesign/es2015-recursive-reduce/blob/master/main.js">GitHub source</a> - <a href="https://github.com/simonewebdesign/es2015-recursive-reduce#readme">Readme instructions</a></li>
  <li>Clojure <a href="https://github.com/simonewebdesign/clojure-recursive-reduce/blob/master/test/clojure_recursive_reduce/core_test.clj">GitHub source</a> - <a href="https://github.com/simonewebdesign/clojure-recursive-reduce#readme">Readme instructions</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blending together two lists in Elm and Swift]]></title>
    <link href="https://www.simonewebdesign.it/blend-together-two-lists-in-elm-and-swift/"/>
    <updated>2016-07-03T20:30:00+01:00</updated>
    <id>https://www.simonewebdesign.it/blend-together-two-lists-in-elm-and-swift</id>
    <content type="html"><![CDATA[<p>Here’s a fun kata:</p>

<blockquote>
  <p>Create a <code class="language-plaintext highlighter-rouge">blend</code> function that, given two lists of the same length, returns a new list with each element alternated. E.g.:</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>blend [1, 2, 3] [4, 5, 6]
=&gt; [1, 4, 2, 5, 3, 6]
</code></pre></div>  </div>
</blockquote>

<p>As with all challenges, it can be solved in many different ways. However this particular one is easily solvable with functional programming techniques such as recursion.</p>

<p>You can try implementing it on your own first or just look straight at the solutions below.</p>

<h2 id="solution-in-elm">Solution in Elm</h2>

<p>The one below is probably the most straightforward solution:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">blend</span> <span class="o">:</span> <span class="kt">List</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">List</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">List</span> <span class="n">a</span>
<span class="n">blend</span> <span class="n">xs</span> <span class="n">ys</span> <span class="o">=</span>
    <span class="kr">case</span> <span class="n">xs</span> <span class="kr">of</span>
        <span class="n">x</span> <span class="o">::</span> <span class="n">xs'</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">::</span> <span class="n">blend</span> <span class="n">ys</span> <span class="n">xs'</span>
        <span class="kr">_</span> <span class="o">-&gt;</span> <span class="kt">[]</span>
</code></pre></div></div>

<p>Notice how I exchanged the arguments in the recursion call. That did the trick!</p>

<p>Let’s try it in the REPL – I added slashes so you can copy-paste the function:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">$</span> <span class="n">elm</span><span class="o">-</span><span class="n">repl</span>

<span class="o">&gt;</span> <span class="n">blend</span> <span class="n">xs</span> <span class="n">ys</span> <span class="o">=</span> <span class="nf">\</span>
    <span class="kr">case</span> <span class="n">xs</span> <span class="kr">of</span> <span class="nf">\</span>
        <span class="n">x</span> <span class="o">::</span> <span class="n">xs'</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">::</span> <span class="n">blend</span> <span class="n">ys</span> <span class="n">xs'</span> <span class="nf">\</span>
        <span class="kr">_</span> <span class="o">-&gt;</span> <span class="kt">[]</span>

<span class="o">&lt;</span><span class="n">function</span><span class="o">&gt;</span> <span class="o">:</span> <span class="kt">List</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">List</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">List</span> <span class="n">a</span>

<span class="o">&gt;</span> <span class="n">blend</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span> <span class="o">:</span> <span class="kt">List</span> <span class="n">number</span>
</code></pre></div></div>

<h2 id="solution-in-swift">Solution in Swift</h2>

<p>We can achieve the same in Swift by using an extension that splits up an Array into head and tail (credits to <a href="http://chris.eidhof.nl/post/swift-tricks/">Chris Eidhof</a>):</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">Array</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">match</span> <span class="p">:</span> <span class="p">(</span><span class="nv">head</span><span class="p">:</span> <span class="kt">T</span><span class="p">,</span> <span class="nv">tail</span><span class="p">:</span> <span class="p">[</span><span class="kt">T</span><span class="p">])?</span> <span class="p">{</span>
      <span class="nf">return</span> <span class="p">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">?</span> <span class="p">(</span><span class="k">self</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="kt">Array</span><span class="p">(</span><span class="k">self</span><span class="p">[</span><span class="mi">1</span><span class="o">..&lt;</span><span class="n">count</span><span class="p">]))</span> <span class="p">:</span> <span class="kc">nil</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And here’s the solution:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">blend</span><span class="p">(</span><span class="nv">firstArray</span><span class="p">:</span> <span class="kt">Array</span><span class="o">&lt;</span><span class="kt">AnyObject</span><span class="o">&gt;</span><span class="p">,</span> <span class="nv">secondArray</span><span class="p">:</span> <span class="kt">Array</span><span class="o">&lt;</span><span class="kt">AnyObject</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Array</span><span class="o">&lt;</span><span class="kt">AnyObject</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="k">let</span> <span class="p">(</span><span class="nv">head</span><span class="p">,</span> <span class="nv">tail</span><span class="p">)</span> <span class="o">=</span> <span class="n">firstArray</span><span class="o">.</span><span class="n">match</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">head</span><span class="p">]</span> <span class="o">+</span> <span class="nf">blend</span><span class="p">(</span><span class="n">secondArray</span><span class="p">,</span> <span class="nv">secondArray</span><span class="p">:</span> <span class="n">tail</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">[]</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If you know of a better way, please let me know! Also feel free to leave a comment with any other alternative solution, even in other languages.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to get the AST of an Elixir program]]></title>
    <link href="https://www.simonewebdesign.it/how-to-get-the-ast-of-an-elixir-program/"/>
    <updated>2015-11-14T19:43:10+00:00</updated>
    <id>https://www.simonewebdesign.it/how-to-get-the-ast-of-an-elixir-program</id>
    <content type="html"><![CDATA[<p>Getting the <strong>AST</strong> (Abstract Syntax Tree) representation of an <strong>Elixir</strong> source is pretty simple.</p>

<p>Let’s say we want to get the <strong>AST of this file</strong>:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lib/hello.ex</span>
<span class="k">defmodule</span> <span class="no">Hello</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">hi</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">"Hello "</span> <span class="o">&lt;&gt;</span> <span class="n">name</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We can do it right away from <code class="language-plaintext highlighter-rouge">iex</code>:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">iex</span>
<span class="no">Erlang</span><span class="o">/</span><span class="no">OTP</span> <span class="mi">18</span> <span class="p">[</span><span class="n">erts</span><span class="o">-</span><span class="mf">7.0</span><span class="p">]</span> <span class="p">[</span><span class="n">source</span><span class="p">]</span> <span class="p">[</span><span class="mi">64</span><span class="o">-</span><span class="n">bit</span><span class="p">]</span> <span class="p">[</span><span class="ss">smp:</span><span class="mi">8</span><span class="p">:</span><span class="mi">8</span><span class="p">]</span> <span class="p">[</span><span class="n">async</span><span class="o">-</span><span class="ss">threads:</span><span class="mi">10</span><span class="p">]</span> <span class="p">[</span><span class="n">kernel</span><span class="o">-</span><span class="ss">poll:</span><span class="no">false</span><span class="p">]</span>

<span class="no">Interactive</span> <span class="no">Elixir</span> <span class="p">(</span><span class="mf">1.0</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span> <span class="o">-</span> <span class="n">press</span> <span class="no">Ctrl</span><span class="o">+</span><span class="no">C</span> <span class="n">to</span> <span class="k">exit</span> <span class="p">(</span><span class="n">type</span> <span class="n">h</span><span class="p">()</span> <span class="no">ENTER</span> <span class="n">for</span> <span class="n">help</span><span class="p">)</span>
<span class="n">iex</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&gt;</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">ast</span><span class="p">}</span> <span class="o">=</span> <span class="no">Code</span><span class="o">.</span><span class="n">string_to_quoted</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">read!</span><span class="p">(</span><span class="s2">"lib/hello.ex"</span><span class="p">))</span>
<span class="p">{</span><span class="ss">:ok</span><span class="p">,</span>
 <span class="p">{</span><span class="ss">:defmodule</span><span class="p">,</span> <span class="p">[</span><span class="ss">line:</span> <span class="mi">1</span><span class="p">],</span>
  <span class="p">[{</span><span class="ss">:__aliases__</span><span class="p">,</span> <span class="p">[</span><span class="ss">counter:</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">line:</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="ss">:Hello</span><span class="p">]},</span>
   <span class="p">[</span><span class="k">do</span><span class="p">:</span> <span class="p">{</span><span class="ss">:def</span><span class="p">,</span> <span class="p">[</span><span class="ss">line:</span> <span class="mi">3</span><span class="p">],</span>
     <span class="p">[{</span><span class="ss">:hi</span><span class="p">,</span> <span class="p">[</span><span class="ss">line:</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[{</span><span class="ss">:name</span><span class="p">,</span> <span class="p">[</span><span class="ss">line:</span> <span class="mi">3</span><span class="p">],</span> <span class="no">nil</span><span class="p">}]},</span>
      <span class="p">[</span><span class="k">do</span><span class="p">:</span> <span class="p">{{:</span><span class="o">.</span><span class="p">,</span> <span class="p">[</span><span class="ss">line:</span> <span class="mi">4</span><span class="p">],</span>
         <span class="p">[{</span><span class="ss">:__aliases__</span><span class="p">,</span> <span class="p">[</span><span class="ss">counter:</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">line:</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="ss">:IO</span><span class="p">]},</span> <span class="ss">:puts</span><span class="p">]},</span> <span class="p">[</span><span class="ss">line:</span> <span class="mi">4</span><span class="p">],</span>
        <span class="p">[{</span><span class="ss">:&lt;&gt;</span><span class="p">,</span> <span class="p">[</span><span class="ss">line:</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="s2">"Hello "</span><span class="p">,</span> <span class="p">{</span><span class="ss">:name</span><span class="p">,</span> <span class="p">[</span><span class="ss">line:</span> <span class="mi">4</span><span class="p">],</span> <span class="no">nil</span><span class="p">}]}]}]]}]]}}</span>
</code></pre></div></div>

<p>In our case, the <code class="language-plaintext highlighter-rouge">ast</code> variable will contain the full AST of the source code.</p>

<p>In case you want to get the <strong>AST of a single line</strong>, it’s even simpler:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">name</span> <span class="o">=</span> <span class="s2">"John"</span>
<span class="s2">"John"</span>

<span class="n">iex</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">"Hello "</span> <span class="o">&lt;&gt;</span> <span class="n">name</span>
<span class="no">Hello</span> <span class="no">John</span>
<span class="ss">:ok</span>

<span class="n">iex</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">ast</span> <span class="o">=</span> <span class="kn">quote</span> <span class="k">do</span><span class="p">:</span> <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">"Hello "</span> <span class="o">&lt;&gt;</span> <span class="n">name</span>
<span class="p">{{:</span><span class="o">.</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[{</span><span class="ss">:__aliases__</span><span class="p">,</span> <span class="p">[</span><span class="ss">alias:</span> <span class="no">false</span><span class="p">],</span> <span class="p">[</span><span class="ss">:IO</span><span class="p">]},</span> <span class="ss">:puts</span><span class="p">]},</span> <span class="p">[],</span>
 <span class="p">[{</span><span class="ss">:&lt;&gt;</span><span class="p">,</span> <span class="p">[</span><span class="ss">context:</span> <span class="no">Elixir</span><span class="p">,</span> <span class="kn">import</span><span class="p">:</span> <span class="no">Kernel</span><span class="p">],</span> <span class="p">[</span><span class="s2">"Hello "</span><span class="p">,</span> <span class="p">{</span><span class="ss">:name</span><span class="p">,</span> <span class="p">[],</span> <span class="no">Elixir</span><span class="p">}]}]}</span>
</code></pre></div></div>

<p>For more context, I recommend reading the <a href="https://elixir-lang.org/getting-started/meta/quote-and-unquote.html">introduction to meta-programming in Elixir</a> on Elixir’s official site.</p>

<p>In case you’re interested in <strong>parsing Elixir</strong>, <a href="https://andrealeopardi.com/posts/tokenizing-and-parsing-in-elixir-using-leex-and-yecc/">Tokenizing and parsing in Elixir with yecc and leex</a> by Andrea Leopardi is a very recommended reading.</p>

<p>Have fun with Elixir!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Get Environment Variables in the Browser]]></title>
    <link href="https://www.simonewebdesign.it/how-to-get-environment-variables-in-the-browser/"/>
    <updated>2015-08-03T12:00:00+01:00</updated>
    <id>https://www.simonewebdesign.it/how-to-get-environment-variables-in-the-browser</id>
    <content type="html"><![CDATA[<h2 id="preface-why">Preface: Why?</h2>

<p><strong>Environment variables</strong> are very useful for <strong>configuring your app</strong> depending on the environment, without having to hardcode any value in the source.</p>

<p>At my current company we are building a <strong>microservice infrastructure</strong>, where the <strong>frontend</strong> and the <strong>backend</strong> are completely decoupled applications. We also use <a href="https://docker.com/">Docker</a> to manage these microservices and link them together. Turns out that storing the configuration in the environment—as opposed to storing it in the database or in the code itself—is quite valuable, as described also in the <a href="http://12factor.net/config">twelve-factor</a> methodology.</p>

<h3 id="advantages">Advantages:</h3>

<ul>
  <li>Language and OS agnostic;</li>
  <li>Easy to change between deploys without changing any code;</li>
  <li>Impossible to accidentally check in source control.</li>
</ul>

<h2 id="how">How?</h2>

<p>A web page doesn’t have access to OS variables, so you can’t normally use them.</p>

<p>The solution is pretty simple: you just need to <strong>generate a file that contains them</strong>.</p>

<p>For such a trivial task you could be tempted to use your language of choice, e.g. in JavaScript (Node.js) you have access to <code class="language-plaintext highlighter-rouge">process.env.SOME_VAR</code>. In Python you would probably do <code class="language-plaintext highlighter-rouge">os.getenv('SOME_VAR')</code> and in Ruby you’d use <code class="language-plaintext highlighter-rouge">ENV['SOME_VAR']</code>—but what about some old-school shell scripting? The script could be as simple as:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># bin/env.sh</span>
<span class="nb">echo</span> <span class="s2">"env = {"</span>
<span class="nb">echo</span> <span class="s2">"  USER: '</span><span class="nv">$USER</span><span class="s2">',"</span>
<span class="nb">echo</span> <span class="s2">"  HOSTNAME: '</span><span class="nv">$HOSTNAME</span><span class="s2">'"</span>
<span class="nb">echo</span> <span class="s2">"}"</span>
</code></pre></div></div>

<p>That, when executed, will become:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// env.js</span>
<span class="nx">env</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">USER</span><span class="p">:</span> <span class="dl">'</span><span class="s1">yourname</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">HOSTNAME</span><span class="p">:</span> <span class="dl">'</span><span class="s1">ubuntu</span><span class="dl">'</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And the script to execute on the shell is:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./bin/env.sh <span class="o">&gt;</span> env.js
</code></pre></div></div>

<p>Pretty straightforward, isn’t it?</p>

<h3 id="test-it">Test it:</h3>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
  ...
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"env.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;script&gt;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">env</span><span class="p">.</span><span class="nx">USER</span><span class="p">,</span> <span class="nx">env</span><span class="p">.</span><span class="nx">HOSTNAME</span><span class="p">);</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>One downside to this approach is that you have to “make a build” every time you change the variables. If you know any workarounds or better solutions, please let me know!</p>

<h3 id="source-and-download">Source and download</h3>

<p>Find the source code on <a href="https://github.com/simonewebdesign/frontend-env-vars">GitHub</a>. Download the zip file <a href="https://github.com/simonewebdesign/frontend-env-vars/archive/master.zip">here</a>.</p>

<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making a game from scratch in HTML5]]></title>
    <link href="https://www.simonewebdesign.it/making-a-game-from-scratch-in-html5/"/>
    <updated>2014-12-01T16:06:53+00:00</updated>
    <id>https://www.simonewebdesign.it/making-a-game-from-scratch-in-html5</id>
    <content type="html"><![CDATA[<blockquote>
  <p>“Pong is one of the earliest arcade video games; it is a tennis sports game featuring simple two-dimensional graphics.” - Wikipedia</p>
</blockquote>

<p>Have you ever dreamed of building a game in JavaScript? I did, and I also managed to make my first one. Of course I also wrote some tips and gotchas to help you complete this nice challenge.</p>

<h2 id="how-to-make-pong-in-html5-canvas">How to make Pong in HTML5 canvas</h2>

<p>Pong, at it’s core, is an extremely simple game. That’s why it’s a good one to begin with if you have just started learning game design basics. Of course you could start with <a href="//www.gamefromscratch.com/post/2013/08/01/Just-starting-out-what-games-should-I-make.aspx" rel="external">many other games</a>, but if you are looking for something relatively simple to build, Pong really is one of the simplest games ever made.</p>

<p><abbr title="As far as I know">AFAIK</abbr>, there are at least two ways of doing it: I personally call them the <em>“simple way”</em> and the <em>“hard way”</em>. I did both, but first let’s explore the simple one.</p>

<h3 id="project-structure">Project structure</h3>

<p>I aimed to make it as simple as possible, so I just created one HTML file that is referencing few JavaScript files. You may ask, why not a whole single file? Because it’s usually preferable to have many little files rather than one massive plate of spaghetti code. So here’s served the project’s structure:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>index.html
canvas.js
game.js
keyboard.js
main.js
render.js
reset.js
update.js
</code></pre></div></div>

<p><strong>index.html</strong> is our single entry point to the game.</p>

<p><strong>canvas.js</strong> contains the code for initializing the <code class="language-plaintext highlighter-rouge">canvas</code> <abbr title="Document Object Model">DOM</abbr> object and the 2D context.</p>

<p><strong>game.js</strong> contains the game objects. This file will be executed only once at the beginning, when the game loads.</p>

<p><strong>keyboard.js</strong> has the keyboard bindings.</p>

<p><strong>main.js</strong> is perhaps the most important file, because it contains the main game loop.</p>

<p><strong>render.js</strong> does… the rendering. (you don’t say?)</p>

<p><strong>reset.js</strong> is for resetting the game to the initial state, called every time a player wins.</p>

<p><strong>update.js</strong> contains 90% of the game logic, and obviously is for updating the game state (before rendering).</p>

<h3 id="the-main-loop">The main loop</h3>

<p>The main loop is at the core of our game. Maybe it’s hard to believe, but virtually every single videogame in the world lives and dies <a href="//designoidgames.com/2013/01/game-programming-basics-time/" rel="external">within a loop</a>.</p>

<p>Implementing a game loop is a lot simpler than you think, but it’s not the focus of this tutorial. The resource I highly recommend for getting started is <a href="http://www.lostdecadegames.com/how-to-make-a-simple-html5-canvas-game/">How to make a simple HTML5 Canvas game</a>, by Matt Hackett. All my work is actually based on his tutorial. Read it, and you’ll get a basic understanding of the fundamentals of game development.</p>

<p>We want to focus on the game logic now, so for the time being let’s pretend our game loop looks like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">update</span><span class="p">();</span> <span class="c1">// update game objects</span>
  <span class="nx">render</span><span class="p">();</span> <span class="c1">// render game objects</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Got it? :-)</p>

<h3 id="ball-movement">Ball movement</h3>

<p>How do we make the ball moving across the screen? In JavaScript, we can define objects with properties. The essential properties of our <code class="language-plaintext highlighter-rouge">ball</code> object are <code class="language-plaintext highlighter-rouge">position</code> and <code class="language-plaintext highlighter-rouge">speed</code>. The <code class="language-plaintext highlighter-rouge">position</code> represents the <em>coordinates</em> where the object is in the canvas space. Example:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">ball</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="na">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="na">speedX</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="na">speedY</span><span class="p">:</span> <span class="mi">0</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In order to make it move, we should change its position, and we can do it through the speed. This is the heart of our game:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nx">isGameStarted</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Ball movement</span>
  <span class="nx">ball</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">speedX</span> <span class="o">*</span> <span class="nx">modifier</span><span class="p">;</span>
  <span class="nx">ball</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">speedY</span> <span class="o">*</span> <span class="nx">modifier</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>As you can imagine, <code class="language-plaintext highlighter-rouge">isGameStarted</code> is just a boolean flag. But what’s <code class="language-plaintext highlighter-rouge">modifier</code>? Well, it’s the <strong>delta time</strong> of our game loop. Put simply, the <a href="//en.wikipedia.org/wiki/Delta_timing" rel="external">delta time</a> is the time elapsed between a frame and another. This is very useful because we can use it to calculate how fast the ball should move. Without it, the game would just lag all the time.</p>

<h3 id="ball-bounce">Ball bounce</h3>

<p>The game logic is mainly about the ball: it should be able to bounce away from the paddles. How can you implement that? It’s pretty simple - have a look at the code below.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Ball is out of the left boundary</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">ball</span><span class="p">.</span><span class="nx">x</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Player 2 wins!</span>
  <span class="nx">p2</span><span class="p">.</span><span class="nx">score</span><span class="o">++</span><span class="p">;</span>
  <span class="nx">reset</span><span class="p">();</span> <span class="c1">// reset the game to the initial state</span>
<span class="p">}</span>

<span class="c1">// Ball is out of the right boundary</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">ball</span><span class="p">.</span><span class="nx">x</span> <span class="o">&gt;=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span> <span class="o">-</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Player 1 wins!</span>
  <span class="nx">p1</span><span class="p">.</span><span class="nx">score</span><span class="o">++</span><span class="p">;</span>
  <span class="nx">reset</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">// Ball is colliding with the top</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">ball</span><span class="p">.</span><span class="nx">y</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">ball</span><span class="p">.</span><span class="nx">speedY</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">ball</span><span class="p">.</span><span class="nx">speedY</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Ball is colliding with the bottom</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">ball</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">size</span> <span class="o">&gt;=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">ball</span><span class="p">.</span><span class="nx">speedY</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">ball</span><span class="p">.</span><span class="nx">speedY</span><span class="p">)</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="c1">// inverted</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Can you see what’s going on in the code? Basically, if the ball goes beyond the canvas’ left or right boundaries, all we do is <strong>increment the score and reset the game</strong>. If the ball touches the top or the bottom instead, we <strong>invert its speed on the Y axis</strong>. If you think about it, it’s all you need to make something reflect over a surface. So, in other words, if the speed is negative we make it positive, and viceversa.</p>

<h3 id="collision-detection">Collision detection</h3>

<p>What should happen when the ball touches one of the paddles? Fundamentally the same thing explained above: it should bounce away, reflecting on the paddle’s surface (and to do this we invert the Y speed). But how do we actually check if they are <strong>colliding</strong>?</p>

<p>The most common kind of collision detection is called <strong>AABB - Axis-Aligned Bounding Boxes</strong>. You can find plenty of resources around the Web explaining how this technique works, so I won’t talk about it (have a quick search for <em>“AABB collision detection”</em>, or just keep reading). As <a href="http://en.wikipedia.org/wiki/Linus_Torvalds" rel="external">Linus Torvalds</a> once said,</p>

<blockquote>
  <p>“Talk is cheap. Show me the code.”</p>
</blockquote>

<p>Here we go:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span>
  <span class="nx">ball</span><span class="p">.</span><span class="nx">x</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="nx">p1</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">width</span><span class="p">)</span>
  <span class="o">&amp;&amp;</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">x</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="nx">ball</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span>
  <span class="o">&amp;&amp;</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">y</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="nx">p1</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span>
  <span class="o">&amp;&amp;</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">y</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="nx">ball</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Ball is colliding with the left paddle</span>
  <span class="c1">// Ensure the speed on the X axis is positive</span>
  <span class="nx">ball</span><span class="p">.</span><span class="nx">speedX</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">ball</span><span class="p">.</span><span class="nx">speedX</span><span class="p">);</span>

  <span class="c1">// Give the ball a bit of randomness by</span>
  <span class="c1">// increasing/decreasing its speed on the Y axis</span>
  <span class="nx">ball</span><span class="p">.</span><span class="nx">speedY</span> <span class="o">=</span> <span class="nx">randomize</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The logic for the right paddle is exactly the same, but the speed on the X axis should be negative instead. In my case I also added a <code class="language-plaintext highlighter-rouge">randomize()</code> function, so the game will be more interesting - you don’t have to implement it this way, but a bit of randomness never hurts in gaming!</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">randomize</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Random float between 0 and 999.9</span>
  <span class="kd">var</span> <span class="nx">_rand</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">;</span>
  <span class="c1">// positive or negative?</span>
  <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mf">0.5</span> <span class="p">?</span> <span class="nx">_rand</span> <span class="p">:</span> <span class="nx">_rand</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="paddle-movement">Paddle movement</h3>

<p>We move the paddles with the keyboard. Keyboard controls can be handled simply by keeping track of which key is currently being pressed (watch for the <code class="language-plaintext highlighter-rouge">keydown</code> event). We can use a simple JavaScript object for that (or an array if you prefer):</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Handle keyboard controls</span>
<span class="kd">var</span> <span class="nx">keysDown</span> <span class="o">=</span> <span class="p">{};</span>

<span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">keydown</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">keysDown</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">},</span> <span class="kc">false</span><span class="p">);</span>

<span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">keyup</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">delete</span> <span class="nx">keysDown</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">];</span>
<span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">keyup</code> and <code class="language-plaintext highlighter-rouge">keydown</code> events are the only two we need for handling the whole keyboard. So on <code class="language-plaintext highlighter-rouge">keydown</code> we add the key; on <code class="language-plaintext highlighter-rouge">keyup</code> we remove it. Simple.</p>

<p>Of course we are going to need JavaScript objects for the paddles as well. In my game I called them <code class="language-plaintext highlighter-rouge">p1</code> and <code class="language-plaintext highlighter-rouge">p2</code>, which can be interpreted as <em>players</em> too.</p>

<p>Here’s the code:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Update game objects</span>
<span class="kd">var</span> <span class="nx">update</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">modifier</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="mi">87</span> <span class="k">in</span> <span class="nx">keysDown</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// P1 holding up (key: w)</span>
    <span class="nx">p1</span><span class="p">.</span><span class="nx">y</span> <span class="o">-=</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">speed</span> <span class="o">*</span> <span class="nx">modifier</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="mi">83</span> <span class="k">in</span> <span class="nx">keysDown</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// P1 holding down (key: s)</span>
    <span class="nx">p1</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">speed</span> <span class="o">*</span> <span class="nx">modifier</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="mi">38</span> <span class="k">in</span> <span class="nx">keysDown</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// P2 holding up (key: arrow up)</span>
    <span class="nx">p2</span><span class="p">.</span><span class="nx">y</span> <span class="o">-=</span> <span class="nx">p2</span><span class="p">.</span><span class="nx">speed</span> <span class="o">*</span> <span class="nx">modifier</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="mi">40</span> <span class="k">in</span> <span class="nx">keysDown</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// P2 holding down (key: arrow down)</span>
    <span class="nx">p2</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="nx">p2</span><span class="p">.</span><span class="nx">speed</span> <span class="o">*</span> <span class="nx">modifier</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="rendering-the-objects-in-the-canvas">Rendering the objects in the canvas</h3>

<p>Here’s the <code class="language-plaintext highlighter-rouge">render()</code> function, in all its glory:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">render</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">#0F0</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// green</span>

  <span class="c1">// P1</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="nx">p1</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nx">p1</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>

  <span class="c1">// P2</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="nx">p2</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">p2</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span> <span class="nx">p2</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nx">p2</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>

  <span class="c1">// ball</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="nx">ball</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">size</span><span class="p">,</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span>

  <span class="c1">// Text options</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">rgb(250, 250, 250)</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">font</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">18px Helvetica</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">textAlign</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">left</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">textBaseline</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">top</span><span class="dl">"</span><span class="p">;</span>

  <span class="c1">// P1 Score</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="nx">p1</span><span class="p">.</span><span class="nx">score</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">);</span>

  <span class="c1">// P2 Score</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="nx">p2</span><span class="p">.</span><span class="nx">score</span><span class="p">,</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span> <span class="o">-</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>
<p>It’s probably worth mentioning that you can use <code class="language-plaintext highlighter-rouge">JSON.stringify()</code> to debug your objects directly in the canvas, e.g.:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Debugging the ball object</span>
<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="dl">"</span><span class="s2">ball: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">ball</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</code></pre></div></div>

<p>However, I don’t recommend it. Just use whatever your browser is offering! If you are a web developer you surely know that there’s a built-in JavaScript console for debugging in your browser (if you don’t, search for <em>developer tools</em>).</p>

<h3 id="resetting-the-game">Resetting the game</h3>

<p>We need to reset the game every time a player scores. The logic is very simple, we just need to provide default values for our objects. Example below.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Reset the game</span>
<span class="kd">var</span> <span class="nx">reset</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">isGameStarted</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

  <span class="nx">ball</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="p">(</span><span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span> <span class="o">-</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
  <span class="nx">ball</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="p">(</span><span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span> <span class="o">-</span> <span class="nx">ball</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>

  <span class="nx">ball</span><span class="p">.</span><span class="nx">speedX</span> <span class="o">=</span> <span class="nx">randomize</span><span class="p">();</span> <span class="c1">// randomly start going left or right</span>
  <span class="nx">ball</span><span class="p">.</span><span class="nx">speedY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<p>This is the main logic of Pong. However, it’s not perfect, and it could be improved a lot in several ways… for example by implementing <strong>physics rules</strong> (or by using a physics engine, that has already done the job for us). We have just simulated the reflection of a ball on a surface, but it’s not realistic at all - let’s make it better.</p>

<h2 id="the-hard-way">The “hard way”</h2>

<p>In a <em>proper</em> Pong game, you can usually control where the ball goes. It could have a steeper or shallower angle of reflection, based on where the ball landed. Should it land on one of the edges of the paddle, the collision should be inelastic. In case it lands exactly on the middle of the paddle, the collision should be <a href="http://hyperphysics.phy-astr.gsu.edu/hbase/elacol.html" rel="external">totally elastic</a>.</p>

<p>In order to implement physics rules in a game, you should have an understanding of basic vector math, trigonometry and - of course - physics. But don’t fear, you don’t have to know everything: just the basics. I personally didn’t know much about physics, but I learned it by reading about it.</p>

<p>Here are some useful resources on the Web:</p>

<ul>
  <li>Math lessons: <a href="//www.mathsisfun.com/" rel="external">www.mathsisfun.com</a></li>
  <li>Physics lessons: <a href="//www.physicsclassroom.com/" rel="external">www.physicsclassroom.com</a></li>
  <li>Vector math cheatsheet: <a href="//higherorderfun.com/blog/2012/06/03/math-for-game-programmers-05-vector-cheat-sheet/" rel="external">higherorderfun.com/blog/2012/06/03/math-for-game-programmers-05-vector-cheat-sheet/</a></li>
  <li>Linear algebra for game developers: <a href="//blog.wolfire.com/2009/07/linear-algebra-for-game-developers-part-1/" rel="external">blog.wolfire.com/2009/07/linear-algebra-for-game-developers-part-1/</a></li>
</ul>

<p>Let’s explore together the potential of 2D vectors.</p>

<h3 id="using-2d-vectors">Using 2D Vectors</h3>

<p>The main thing you’ll have to understand is how vectors are used in game development. As an example, let’s go back to our <code class="language-plaintext highlighter-rouge">ball</code> object and modify it to use vectors. It will look like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">ball</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">position</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Vector</span><span class="p">({</span> <span class="na">x</span><span class="p">:</span> <span class="mi">0</span> <span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="mi">0</span> <span class="p">}),</span>
  <span class="na">velocity</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Vector</span><span class="p">({</span> <span class="na">x</span><span class="p">:</span> <span class="mi">0</span> <span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="mi">0</span> <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Four values at the price of two attributes! And this is a lot better now, not only because we are using less attributes, but because we can use vector math. Believe me, vectors simplify your game a lot.</p>

<p>You may have noticed that I didn’t use <code class="language-plaintext highlighter-rouge">speed</code>, but I used <code class="language-plaintext highlighter-rouge">velocity</code> instead. The reason is that <code class="language-plaintext highlighter-rouge">speed</code> is a <em>scalar</em> quantity, while <code class="language-plaintext highlighter-rouge">velocity</code> is a <em>vector</em> quantity. Put simply, <code class="language-plaintext highlighter-rouge">speed</code> is an information that’s <em>contained</em> in <code class="language-plaintext highlighter-rouge">velocity</code>! You may want to <a rel="external" href="//www.physicsclassroom.com/class/1DKin/Lesson-1/Speed-and-Velocity">read about it</a>, albeit not directly related to programming.</p>

<h3 id="a-proper-ball-reflection">A proper ball reflection</h3>

<p>We can implement proper reflection (not a fake one) by using this JavaScript function:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">ball</span> <span class="o">=</span> <span class="p">{</span>
  <span class="c1">// the velocity vector</span>
  <span class="na">velocity</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Vector</span><span class="p">(),</span>

  <span class="cm">/*
  * The formula:
  *
  *  R = 2(V · N) * N - V
  *
  * V: velocity vector
  * N: a normalized vector of the plane surface (e.g. paddle or wall)
  * R: the reflected velocity vector
  */</span>
  <span class="na">deflect</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">N</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">dot</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">velocity</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">N</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">v1</span> <span class="o">=</span> <span class="nx">N</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nx">dot</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">velocity</span> <span class="o">=</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">subSelf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">velocity</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>This is how I’ve implemented it by using a vector library I found on the Web (find the <a rel="external" href="https://github.com/dudeOMG/pong/blob/master/js/vector2.js">source code on GitHub</a>). Given a paddle’s normal, it will reflect any vector, but you have to make sure the paddle’s normal is a unit vector (in other words, it’s <em>normalized</em>).</p>

<h2 id="conclusion">Conclusion</h2>

<p>I hope you enjoyed this article. Who’s following my blog since the beginning will probably remember <a href="/playing-around-with-javascript/">my first blog post</a>. It was more than 2 years ago, and at that time I was really excited by the idea to build a game with JavaScript. I finally did it, and it has been fun indeed! However, I learned a big lesson: although it was fun, it wasn’t really worth reinventing the wheel.</p>

<p>So, if you got through all this tutorial, first of all congratulations! Secondly, consider using a game engine. Thirdly, maybe consider <em>not</em> using JavaScript… just use whatever you feel comfortable with. For instance, if you like the Ruby language (<a href="/ruby-is-magic/">I do!</a>), you could use <a rel="external" href="//opalrb.org/">Opal</a>, a Ruby to JavaScript compiler.</p>

<h2 id="demo-and-source-code">Demo and source code</h2>

<p>You can <a href="/games/pong/">play the game here</a>.</p>

<p>The <a rel="external" href="https://github.com/dudeOMG/pong">full source code</a> is on GitHub so you can clone it, fork it and even make your own from scratch, if you feel like it’s worth your time. If you are interested in the simple way, checkout the <a rel="external" href="https://github.com/dudeOMG/pong/releases/tag/v1.0">v1.0 release</a>.
The hard way is in the master branch.</p>

<p>As always, if you have any thoughts or questions, feel free to leave a comment below.</p>

<p>Have fun!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Sublime Text 3 on Linux]]></title>
    <link href="https://www.simonewebdesign.it/install-sublime-text-3-on-linux/"/>
    <updated>2014-09-01T13:35:34+01:00</updated>
    <id>https://www.simonewebdesign.it/install-sublime-text-3-on-linux</id>
    <content type="html"><![CDATA[<p>There are <a ref="external" href="http://sublime-text-unofficial-documentation.readthedocs.org/en/latest/getting_started/install.html#linux">many ways</a> of <strong>installing Sublime Text 3 on Linux</strong>, but if you’re looking for a fast, straightforward way, I believe you are in the right place.</p>

<p>This script will install <strong>the latest build of Sublime Text 3</strong>.</p>

<p>Open your terminal and run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-L</span> git.io/sublimetext | sh
</code></pre></div></div>

<p>It will install the <a href="https://sublime.wbond.net/" rel="external">Package Control</a> as well, so you don’t have to do it yourself.</p>

<p>If you are interested to see the actual code behind, here we go:</p>

<p><a href="https://gist.github.com/simonewebdesign/8507139">https://gist.github.com/simonewebdesign/8507139</a></p>

<p>It should work on most Linux distros; if not, please let me know by leaving a comment below. I’m here to help.</p>

<p>Enjoy!</p>

<p><strong>Update</strong>: When I wrote this script, my motivation was that there was no easy way to install Sublime Text on Linux. However, nowadays there is an official repository providing builds for all the major Linux package managers: <a href="https://www.sublimetext.com/docs/3/linux_repositories.html" rel="external">see here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to change Bootstrap grid to 960px]]></title>
    <link href="https://www.simonewebdesign.it/how-to-change-bootstrap-grid-to-960px/"/>
    <updated>2014-08-18T21:13:06+01:00</updated>
    <id>https://www.simonewebdesign.it/how-to-change-bootstrap-grid-to-960px</id>
    <content type="html"><![CDATA[<p>Many people think that changing <code class="language-plaintext highlighter-rouge">.container</code>’s width to <code class="language-plaintext highlighter-rouge">960px</code> is sufficient; well, it’s not quite true.</p>

<p>As per Bootstrap’s docs, you can <strong>disable responsiveness by forcing a fixed width to the container</strong>:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">960px</span> <span class="cp">!important</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="but-is-it-what-you-really-want">But is it what you <em>really</em> want?</h2>

<p>I love Bootstrap, but personally if I had to build a <strong>fixed-width 960px site</strong>, which is quite old school nowadays, I wouldn’t use Bootstrap at all. And you know what? In most cases I wouldn’t even use a <strong>grid system</strong>! I’d use plain-old CSS (or Sass), and I’m pretty confident it would be fine. But that’s me. Of course you are free to do anything you want. But remember, Bootstrap’s focus is on <strong>mobile and responsive design</strong>.</p>

<p>If you need a 960px grid system, you may not want all the stuff that comes with Bootstrap. Also, you may want to think again about what you are going to build; this is way more important than the <a href="https://usablica.github.io/front-end-frameworks/compare.html">front end framework</a> you will choose.</p>

<p><strong>Now, this tutorial is for who wants a 960px site, but still preserving responsiveness</strong>.</p>

<h2 id="show-me-the-light">Show me the light!</h2>

<p>What I’m going to explain is not a hack, it’s the way Bootstrap works.</p>

<p>When you need to <strong>change Bootstrap’s default width</strong>, the best way is to recompile its source code. Yeah, that sounds hard and time consuming, but don’t panic.</p>

<p>If you are using Sass or LESS will be very easy to customize the grid system. However it really depends on what framework you are using.</p>

<p>E.g.: if you are using Ruby on Rails, chances are you are using the <a href="https://github.com/twbs/bootstrap-sass">bootstrap-sass</a> gem. On the README in GitHub there’s already everything you need to know in order to customize Bootstrap. The only thing you have to be aware is that you should <strong>redefine variables before importing Bootstrap</strong>, otherwise Bootstrap will use the old ones.</p>

<h3 id="the-960px-grid-system-values">The 960px grid system values</h3>

<p>These are the correct values for a 960px grid (in Sass):</p>

<div class="language-sass highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// default is 1140px + $grid-gutter-width</span>
<span class="nv">$container-large-desktop</span><span class="p">:</span> <span class="m">940px</span> <span class="o">+</span> <span class="nv">$grid-gutter-width</span><span class="err">;</span>

<span class="c1">// default is 30px</span>
<span class="nv">$grid-gutter-width</span><span class="p">:</span> <span class="m">20px</span><span class="err">;</span>
</code></pre></div></div>

<h3 id="what-about-the-media-queries">What about the media queries?</h3>

<p>You may want to disable the media query for large desktops, you don’t need it anymore.</p>

<p>Changing <code class="language-plaintext highlighter-rouge">$screen-lg</code> to be <code class="language-plaintext highlighter-rouge">$screen-md</code> should do it.</p>

<hr />

<p>I believe this is the best solution so far. It’s far better than removing all stuff related to large desktops, because:</p>

<ul>
  <li>it’s definitely easier;</li>
  <li>you’ll be able to upgrade your custom Bootstrap when you’ll want to;</li>
  <li>you won’t run into any issues.</li>
</ul>

<h2 id="what-if-im-using-plain-css">What if I’m using plain CSS?</h2>

<p>If you are using CSS you can use the online build customizer. However I recommend you to switch to Sass or LESS.</p>

<h3 id="3-simple-steps">3 simple steps</h3>

<ol>
  <li>Go to: <a href="http://getbootstrap.com/customize/">http://getbootstrap.com/customize/</a></li>
  <li>Customize the <a href="http://getbootstrap.com/customize/#grid-system">Grid system’s variables</a>;</li>
  <li>Download your custom version of Bootstrap.</li>
</ol>

<p>That’s it!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with rbenv]]></title>
    <link href="https://www.simonewebdesign.it/getting-started-with-rbenv/"/>
    <updated>2014-07-14T11:10:14+01:00</updated>
    <id>https://www.simonewebdesign.it/getting-started-with-rbenv</id>
    <content type="html"><![CDATA[<p>If you are struggling to get rbenv working on your machine, then I believe you landed in the right place: here I’m sharing some gotchas I had while setting up rbenv on Mac OS X 10.9.3.</p>

<p>First of all, <strong>make sure you remove RVM completely. It’s not compatible with rbenv.</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm</span> <span class="nt">-r</span> ~/.rvm
</code></pre></div></div>

<p>Remove it from your <code class="language-plaintext highlighter-rouge">$PATH</code> as well.</p>

<p>I’m using <a href="http://fishshell.com/">fish shell</a>, that has its own quirks, such as it doesn’t have a <code class="language-plaintext highlighter-rouge">export</code> command to export variables to <code class="language-plaintext highlighter-rouge">$PATH</code>. Instead it uses <code class="language-plaintext highlighter-rouge">set</code>. E.g.:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set </span>VARIABLE VALUE
</code></pre></div></div>

<p>For example, in order to call <code class="language-plaintext highlighter-rouge">rbenv</code>, I set up my <code class="language-plaintext highlighter-rouge">$PATH</code> this way:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set</span> <span class="nt">-u</span> fish_user_paths <span class="nv">$fish_user_paths</span> ~/.rbenv/bin
</code></pre></div></div>

<p>Fish also handles things a bit differently. If you are using it, you’ll probably be burned by the fact it doesn’t understand the <code class="language-plaintext highlighter-rouge">$</code> function that in POSIX shells creates a sub shell. Fortunately I managed to find a fix for that: <a href="https://coderwall.com/p/hmousw">see this article</a>. Basically it says you need to add this code to your <code class="language-plaintext highlighter-rouge">config.fish</code> file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set</span> <span class="nt">-gx</span> RBENV_ROOT /usr/local/var/rbenv
<span class="nb">.</span> <span class="o">(</span>rbenv init -|psub<span class="o">)</span>
</code></pre></div></div>

<p>But pay attention and make sure you understand what’s going on here. Actually the code above didn’t work for me, as <strong>the installation path of my rbenv was different. If you installed rbenv with <code class="language-plaintext highlighter-rouge">git clone</code>, the right code is:</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set</span> <span class="nt">-gx</span> RBENV_ROOT ~/.rbenv
<span class="nb">.</span> <span class="o">(</span>rbenv init -|psub<span class="o">)</span>
</code></pre></div></div>

<p>In fish it’s also possible (albeit not recommended) to use the <code class="language-plaintext highlighter-rouge">config.fish</code> file in order to set the <code class="language-plaintext highlighter-rouge">$PATH</code> variable permanently. You can do it with (e.g.):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set</span> <span class="nt">-x</span> PATH ~/.rbenv/shims /usr/local/bin /usr/bin /bin <span class="nv">$PATH</span>
</code></pre></div></div>

<p>A big gotcha here is to have <code class="language-plaintext highlighter-rouge">~/.rbenv/shims</code> <strong>before</strong> <code class="language-plaintext highlighter-rouge">/bin</code> and <code class="language-plaintext highlighter-rouge">/usr/bin</code>, otherwise the shell will load the system’s Ruby first (and <a href="http://robots.thoughtbot.com/psa-do-not-use-system-ruby">you don’t want to use the system’s Ruby</a> for your projects).</p>

<p>To ensure I was using the right Ruby version, I moved the system Ruby away, in <code class="language-plaintext highlighter-rouge">/tmp</code>. Of course you need to <code class="language-plaintext highlighter-rouge">sudo</code> for that:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo mv</span> /usr/bin/ruby /tmp
</code></pre></div></div>

<p>Another super important thing is: <strong>NEVER EVER install gems using <code class="language-plaintext highlighter-rouge">sudo</code></strong>. If you do that you’re going to have serious problems/conflicts and weird errors in your shell. Do yourself a favour by installing things in your home (<code class="language-plaintext highlighter-rouge">~</code>) and avoiding <code class="language-plaintext highlighter-rouge">sudo</code> at all costs. <em>Always.</em></p>

<p>A good thing to do for ensuring you are going down the right path is to use <code class="language-plaintext highlighter-rouge">which</code>: <code class="language-plaintext highlighter-rouge">which rbenv</code>, <code class="language-plaintext highlighter-rouge">which ruby</code> and <code class="language-plaintext highlighter-rouge">which gem</code> will tell you if you actually have your stuff in the right place (that is the <code class="language-plaintext highlighter-rouge">.rbenv/shims</code> on your home folder).</p>

<p>At this stage you may be able to install Ruby (you need the <a href="https://github.com/sstephenson/ruby-build">ruby-build</a> plugin for that). Run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rbenv <span class="nb">install</span> <span class="nt">-l</span>
</code></pre></div></div>

<p>The command above will give you a list of all the available rubies to install. Run, for example:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rbenv <span class="nb">install </span>2.1.2
rbenv rehash
</code></pre></div></div>

<p>The above will install Ruby 2.1.2 into <code class="language-plaintext highlighter-rouge">~/.rbenv/versions</code> and will rebuild your shim files. Note that you need to run <code class="language-plaintext highlighter-rouge">rbenv rehash</code> every time after you install a version of Ruby.</p>

<p>Another useful command is:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rbenv global
</code></pre></div></div>

<p>This tells you which version of Ruby you have. It may differ from what <code class="language-plaintext highlighter-rouge">ruby -v</code> says to you, and if that’s your case, you’ll probably want to <a href="https://github.com/sstephenson/rbenv#understanding-path">check your <code class="language-plaintext highlighter-rouge">$PATH</code></a>.</p>

<p>Hopefully that’s enough for getting you started with rbenv. Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bye bye Wordpress. Welcome Octopress!]]></title>
    <link href="https://www.simonewebdesign.it/bye-bye-wordpress-welcome-octopress/"/>
    <updated>2014-05-13T17:55:37+01:00</updated>
    <id>https://www.simonewebdesign.it/bye-bye-wordpress-welcome-octopress</id>
    <content type="html"><![CDATA[<p><img src="/images/octopress_logo.png" alt="Octopress" class="basic-alignment left" /></p>

<p><strong>I did it!</strong> I’ve finally migrated my blog to Octopress. It was a bit of a PITA, and it took a lot more than what I expected, but I did it.</p>

<p>Apologies if you weren’t able to see the website yesterday; the DNS took about 11 hours to propagate, and the site was back UP just this morning. It is now hosted by Heroku and it’s <strong>faster than ever</strong>.</p>

<p>Prepare yourself to see lots of new stuff in the next few weeks! ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby is Magic]]></title>
    <link href="https://www.simonewebdesign.it/ruby-is-magic/"/>
    <updated>2014-04-30T01:07:00+01:00</updated>
    <id>https://www.simonewebdesign.it/ruby-is-magic</id>
    <content type="html"><![CDATA[<p>Have you ever heard about <a href="https://ruby-lang.org/" rel="external">Ruby</a>? It's my favourite programming language. It was invented in Japan, which is probably the most amazing country in the world, and I think no language can beat Ruby when it comes to magic. Yes: Ruby is Magic.</p>

<p>You don’t believe me, do you? Fair enough, but let me show you why Ruby is so awesome.</p>

<h2 id="you-can-read-and-write-it-like-english">You can read and write it like English.</h2>

<p>Yes, it’s true. Ruby is so simple and intuitive that you can think in English before writing some Ruby code. For example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">speak_english</span>
  <span class="nb">print</span> <span class="s2">"Hello, world!"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The code above is a Ruby function (or method) declaration. So, when you want to run the <code class="language-plaintext highlighter-rouge">speak_english</code> function, you do it this way:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">speak_english</span>
<span class="no">Hello</span><span class="p">,</span> <span class="n">world!</span> <span class="o">=&gt;</span> <span class="kp">nil</span>
</code></pre></div></div>

<p>You may have noticed the <code class="language-plaintext highlighter-rouge">nil</code>: what’s that? It’s just nothing, literally. It represents the void (emptiness, no value at all). In other languages, such as SQL (the mother tongue of databases), you can find it as <code class="language-plaintext highlighter-rouge">NULL</code>.</p>

<h2 id="in-ruby-everything-is-an-object">In Ruby, everything is an object.</h2>

<p>Do you know about OOP? It means Object-Oriented Programming, and it’s probably the most important programming paradigm ever invented so far. Ruby takes full advantage of OOP. And when I say full, I literally mean: <em>everything</em>, in Ruby, is an object. Even numbers! If you know at least one programming language, say Java, you must be aware of the fact that Java numbers are primitive types, which mean that they’re not objects. In Ruby, things are different.</p>

<p>Let’s make an example. Let’s say you want to use the <code class="language-plaintext highlighter-rouge">speak_english</code> function 3 times. In Java, you’d do something like:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span>
<span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
        <span class="o">{</span>
            <span class="n">speakEnglish</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">speakEnglish</span><span class="o">()</span>
    <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello, world!"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>So much code for something so simple… in Ruby, instead, you can do this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">3</span><span class="p">.</span><span class="nf">times</span> <span class="k">do</span>
  <span class="n">speak_english</span>
<span class="k">end</span>
<span class="no">Hello</span><span class="p">,</span> <span class="n">world!</span> <span class="no">Hello</span><span class="p">,</span> <span class="n">world!</span> <span class="no">Hello</span><span class="p">,</span> <span class="n">world!</span> <span class="o">=&gt;</span> <span class="mi">3</span>
</code></pre></div></div>

<p>See? I called a function on a number! Cool, isn’t it? And I used only 3 lines of code :-)</p>

<h2 id="ruby-is-clear-concise-and-understandable">Ruby is clear, concise and understandable.</h2>

<p>I was a PHP developer when I discovered Ruby. Although I had a bit of OOP background, I was used to write PHP code in a procedural style. Procedural code looks something like:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">doThis</span><span class="p">();</span>
<span class="nx">doThat</span><span class="p">();</span>
<span class="nx">doSomethingElse</span><span class="p">();</span>
</code></pre></div></div>

<p>There’s absolutely nothing wrong with this approach, apart from the fact that it starts being cumbersome, sometimes… because it’s not Object-Oriented. I’ll make one last example, taken from a beautiful <a href="https://stackoverflow.com/questions/1113611/what-does-ruby-have-that-python-doesnt-and-vice-versa#answer-4102608">StackOverflow’s answer</a>.</p>

<p>Reverse the words in this string:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>backwards is sentence This
</code></pre></div></div>

<p>So the final result must be:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>This sentence is backwards
</code></pre></div></div>

<p>When you think about how you would do it, you’d do the following:</p>

<ul>
  <li>Split the sentence up into words</li>
  <li>Reverse the words</li>
  <li>Re-join the words back into a string</li>
</ul>

<p>In PHP, you’d do this:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$sentence</span> <span class="o">=</span> <span class="s2">"backwards is sentence This"</span><span class="p">;</span>
<span class="nv">$splitted</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s2">" "</span><span class="p">,</span> <span class="nv">$sentence</span><span class="p">);</span>
<span class="nv">$reversed</span> <span class="o">=</span> <span class="nb">array_reverse</span><span class="p">(</span><span class="nv">$splitted</span><span class="p">);</span>
<span class="nv">$rejoined</span> <span class="o">=</span> <span class="nb">implode</span><span class="p">(</span><span class="s2">" "</span><span class="p">,</span> <span class="nv">$reversed</span><span class="p">);</span>
</code></pre></div></div>

<p>In Python:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sentence</span> <span class="o">=</span> <span class="s">"backwards is sentence This"</span>
<span class="n">splitted</span> <span class="o">=</span> <span class="n">sentence</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>
<span class="nb">reversed</span> <span class="o">=</span> <span class="nb">reversed</span><span class="p">(</span><span class="n">splitted</span><span class="p">)</span>
<span class="n">rejoined</span> <span class="o">=</span> <span class="s">" "</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">reversed</span><span class="p">)</span>
</code></pre></div></div>

<p>And Ruby:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sentence</span> <span class="o">=</span> <span class="s2">"backwards is sentence This"</span>
<span class="n">splitted</span> <span class="o">=</span> <span class="n">sentence</span><span class="p">.</span><span class="nf">split</span>
<span class="n">reversed</span> <span class="o">=</span> <span class="n">splitted</span><span class="p">.</span><span class="nf">reverse</span>
<span class="n">rejoined</span> <span class="o">=</span> <span class="n">reversed</span><span class="p">.</span><span class="nf">join</span>
</code></pre></div></div>

<p>Every language required 4 lines of code. Now let’s compare the one-liners.</p>

<h3 id="php">PHP</h3>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">implode</span><span class="p">(</span><span class="s2">" "</span><span class="p">,</span> <span class="nb">array_reverse</span><span class="p">(</span><span class="nb">explode</span><span class="p">(</span><span class="s2">" "</span><span class="p">,</span> <span class="nv">$sentence</span><span class="p">)));</span>
</code></pre></div></div>

<h3 id="python">Python</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">" "</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">reversed</span><span class="p">(</span><span class="n">sentence</span><span class="p">.</span><span class="n">split</span><span class="p">()))</span>
</code></pre></div></div>

<h3 id="ruby">Ruby</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sentence</span><span class="p">.</span><span class="nf">split</span><span class="p">.</span><span class="nf">reverse</span><span class="p">.</span><span class="nf">join</span> <span class="s2">" "</span>
</code></pre></div></div>

<p>Now, can you see the beauty of Ruby? It’s just… <em>magic</em>.</p>

<iframe width="100%" height="315" src="https://www.youtube-nocookie.com/embed/NLQzSZmxJLQ" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash script for batch running OptiPNG]]></title>
    <link href="https://www.simonewebdesign.it/bash-script-for-batch-running-optipng/"/>
    <updated>2014-03-08T14:54:15+00:00</updated>
    <id>https://www.simonewebdesign.it/bash-script-for-batch-running-optipng</id>
    <content type="html"><![CDATA[<h3>Optimize all your images with a single command:</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="nb">.</span> <span class="nt">-name</span> <span class="s1">'*.png'</span> | xargs optipng <span class="nt">-nc</span> <span class="nt">-nb</span> <span class="nt">-o7</span> <span class="nt">-full</span>
</code></pre></div></div>

<hr />

<h2>What is OptiPNG?</h2>

<p><a href="http://optipng.sourceforge.net/" title="OptiPNG is a PNG optimizer that recompresses image files to a smaller size, without losing any information. This program also converts external formats (BMP, GIF, PNM and TIFF) to optimized PNG, and performs PNG integrity checks and corrections.">OptiPNG</a> is a PNG optimizer tool. If you want your website to be faster, you should consider optimizing images.</p>

<p>When I ran the <a href="http://developers.google.com/speed/pagespeed/insights/" title="PageSpeed Insights" rel="external">Google PageSpeed</a> tool towards my website, I got a score of 81/100 for Desktop, 61/100 for Mobile. Pretty low, I thought. So I decided to go through the "Consider Fixing" issues, and the first one was - guess what? - <strong>optimize images</strong>.</p>

<blockquote>Properly formatting and compressing images can save many bytes of data.</blockquote>

<p><img src="/images/optimize-all-the-images.png" alt="OPTIMIZE ALL THE IMAGES!" width="280" height="210" class="basic-alignment left" />The thing I did immediately next was reading the article that Google suggested: it's a nice reading on Google Developers about <a href="https://developers.google.com/speed/docs/insights/OptimizeImages" title="Optimizing images - Google Developers" rel="external">optimizing images</a>. The first recommendation is: <strong>Use an image compressor</strong>. OptiPNG is one of them.</p>

<p>On the OptiPNG site I realized it works only for one image at a time, so I had the need to write a script that runs the optimizer for all images at the same time.</p>

<p>Luckily enough, after a bit of search, I found a blog post titled <a href="http://www.justpowered.de/blog/shellbatch/optimize-all-png-images-recursively.html" title="Optimize all PNG images recursively">Optimize all PNG images recursively</a>, which finally solved my problem. All the credits belong to that blog.</p>

<p>After running the script I got a score of 86/100 for Desktop (before was 81), and 68/100 for Mobile (before was 61), <strong>all without loss of quality</strong>. Definitely worth a try!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4: update/synchronize views with database schema after a migration]]></title>
    <link href="https://www.simonewebdesign.it/ruby-on-rails-synchronize-views-database-after-migration/"/>
    <updated>2014-02-09T00:00:00+00:00</updated>
    <id>https://www.simonewebdesign.it/ruby-on-rails-synchronize-views-database-after-migration</id>
    <content type="html"><![CDATA[<p>
  So you just updated your model and the related database schema, but your views are now obsolete. How to refresh them?
</p>

<p>
  Well, there are a lot of premises to say here. First, <strong>there&#8217;s no actual way to synchronize your views with your model.</strong> The best way is to <strong>do it manually</strong>, but it&#8217;s not the <em>only</em> way. The other way, which I&#8217;m going to explain in this post, actually only works if you are willing to <em>scaffold</em> your whole model/view/controller/tests from scratch. This is probably not desirable in most of cases, but I assure you can safely try this path if you are in a early stage of development, or if you are ok with the default (generated) Rails&#8217; views. So, whatever, if you don&#8217;t want to <code>rake generate scaffold your_resource</code> again, you can stop reading now.
</p>

<hr />

<p>
  Oh well, you are still reading :-)
</p>

<p>
  I&#8217;ll proceed explaining how to synchronize your views after the migration(s) you have run. Let&#8217;s just start from scratch.
</p>

<h2>
  A full example
</h2>

<p>
  Let&#8217;s say we have these two models: <code>Child</code> and <code>Toy</code>.
</p>

<h3 id="child">Child</h3>

<ul>
  <li>
    name
  </li>
  <li>
    birth_date
  </li>
</ul>

<h3 id="toy">Toy</h3>

<ul>
  <li>
    description
  </li>
  <li>
    price
  </li>
  <li>
    child_id
  </li>
</ul>

<p>
  As you might have already guessed, I am going to tie our models with a <em>one-to-many</em> relationship: a child <code>has_many</code> toys, and a toy <code>belongs_to</code> a child.
</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/models/child.rb</span>
<span class="k">class</span> <span class="nc">Child</span> <span class="o">&gt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:toys</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/models/toy.rb</span>
<span class="k">class</span> <span class="nc">Toy</span> <span class="o">&gt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:child</span>
<span class="k">end</span>
</code></pre></div></div>

<p>
  Let's create the application and scaffold these resources:
</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails new DemoApp <span class="o">&amp;&amp;</span> <span class="nb">cd </span>DemoApp
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails generate scaffold child name birth_date:date

<span class="nv">$ </span>rails generate scaffold toy description price:decimal child:references
</code></pre></div></div>

<p>
  Run the migrations:
</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rake db:migrate
<span class="o">==</span>  CreateChildren: migrating <span class="o">=================================================</span>
<span class="nt">--</span> create_table<span class="o">(</span>:children<span class="o">)</span>
   -&gt; 0.0014s
<span class="o">==</span>  CreateChildren: migrated <span class="o">(</span>0.0015s<span class="o">)</span> <span class="o">========================================</span>

<span class="o">==</span>  CreateToys: migrating <span class="o">=====================================================</span>
<span class="nt">--</span> create_table<span class="o">(</span>:toys<span class="o">)</span>
   -&gt; 0.0028s
<span class="o">==</span>  CreateToys: migrated <span class="o">(</span>0.0029s<span class="o">)</span> <span class="o">============================================</span>
</code></pre></div></div>

<p>
  We can now start the server and check that everything went good.
</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails s
<span class="o">=&gt;</span> Booting WEBrick
<span class="o">=&gt;</span> Rails 4.1.0.beta1 application starting <span class="k">in </span>development on http://0.0.0.0:3000
...
</code></pre></div></div>

<p><img src="/images/1-listing-children.png" loading="lazy" alt="listing children empty" /></p>

<p>
  It looks fine, except for one thing: there's no data displayed! Let's add some entries manually.
</p>

<p><img src="/images/2-listing-children.png" loading="lazy" alt="listing children" /></p>

<p>
  Good. Now let's give some toys to our boys:
</p>

<p><img src="/images/3-toy-created.png" loading="lazy" alt="toy successfully created" /></p>

<p>
  Done. But wait a minute: this view looks a bit... crappy, doesn't it? We don't want to see a reference to a child... just his/her name. Even the prices don't look right.
</p>

<p>
  Let's generate the scaffold again, with some corrections.
</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails g scaffold toy description:string<span class="o">{</span>50<span class="o">}</span> price:decimal<span class="o">{</span>4,2<span class="o">}</span>
      invoke  active_record
Another migration is already named create_toys: /Users/simo/Projects/DemoApp/db/migrate/20140209145850_create_toys.rb. Use <span class="nt">--force</span> to remove the old migration file and replace it.
</code></pre></div></div>

<p>
  Fair enough. We must destroy the entire scaffold before recreating it.
</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails destroy scaffold toy
      invoke  active_record
      remove    db/migrate/20140208224426_create_toys.rb
      remove    app/models/toy.rb
      remove    ...

<span class="nv">$ </span>rails generate scaffold toy description:string<span class="o">{</span>50<span class="o">}</span> price:decimal<span class="o">{</span>4,2<span class="o">}</span> child:references
      invoke  active_record
      create    db/migrate/20140209145850_create_toys.rb
      create    app/models/toy.rb
      create    ...
</code></pre></div></div>

<p>
  Ok. Let's give a quick look at the generated migration.
</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CreateToys</span> <span class="o">&gt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">create_table</span> <span class="ss">:toys</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">string</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">limit: </span><span class="mi">50</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">decimal</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">precision: </span><span class="mi">4</span><span class="p">,</span> <span class="ss">scale: </span><span class="mi">2</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">references</span> <span class="ss">:child</span><span class="p">,</span> <span class="ss">index: </span><span class="kp">true</span>

      <span class="n">t</span><span class="p">.</span><span class="nf">timestamps</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>
  It looks right. Let's run it!
</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rake db:migrate
<span class="o">==</span>  CreateToys: migrating <span class="o">=====================================================</span>
<span class="nt">--</span> create_table<span class="o">(</span>:toys<span class="o">)</span>
rake aborted!
An error has occurred, this and all later migrations canceled:

SQLite3::SQLException: table <span class="s2">"toys"</span> already exists: CREATE TABLE <span class="s2">"toys"</span> <span class="o">(</span><span class="s2">"id"</span> INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, <span class="s2">"description"</span> varchar<span class="o">(</span>50<span class="o">)</span>, <span class="s2">"price"</span> decimal<span class="o">(</span>4,2<span class="o">)</span>, <span class="s2">"child_id"</span> integer, <span class="s2">"created_at"</span> datetime, <span class="s2">"updated_at"</span> datetime<span class="o">)</span> /Users/simo/.rvm/gems/ruby-2.0.0-p353/gems/sqlite3-1.3.8/lib/sqlite3/database.rb:91:in <span class="sb">`</span>initialize<span class="s1">'
</span></code></pre></div></div>

<p>
  Whoops! The table already exists. We should remove it first. Edit the migration:
</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CreateToys</span> <span class="o">&gt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="c1"># This will do the work</span>
    <span class="n">drop_table</span> <span class="ss">:toys</span>

    <span class="n">create_table</span> <span class="ss">:toys</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">string</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">limit: </span><span class="mi">50</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">decimal</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">precision: </span><span class="mi">4</span><span class="p">,</span> <span class="ss">scale: </span><span class="mi">2</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">references</span> <span class="ss">:child</span><span class="p">,</span> <span class="ss">index: </span><span class="kp">true</span>

      <span class="n">t</span><span class="p">.</span><span class="nf">timestamps</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>
  And migrate again:
</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rake db:migrate
<span class="o">==</span>  CreateToys: migrating <span class="o">=====================================================</span>
<span class="nt">--</span> drop_table<span class="o">(</span>:toys<span class="o">)</span>
   -&gt; 0.0107s
<span class="nt">--</span> create_table<span class="o">(</span>:toys<span class="o">)</span>
   -&gt; 0.0109s
<span class="o">==</span>  CreateToys: migrated <span class="o">(</span>0.0220s<span class="o">)</span> <span class="o">============================================</span>
</code></pre></div></div>

<p>
  Ok, we are ready to start the server again and see what changed.
</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails s
</code></pre></div></div>

<p>
  That's it. This is basically the process. It's way too labourious, I know, but the truth is that we just can't efficiently automate a process like this, because: what if we generate more migrations during the journey? We would have to delete them and recreate again the whole schema by running <code>rails generate scaffold</code>, <code>rake db:reset</code> and rerun the generate again and again... well, that sucks. At this stage we've got the point: it's better to do it manually! Rails gives us tons of helper methods to format prices and get things done, and that's definitely the path to follow.
</p>

<p>
  If you are still not convinced, you can check this <a href="https://stackoverflow.com/questions/1732135/question-regarding-rails-migration-and-synchronizing-views">question on StackOverflow</a>. Basically, it's almost the same question I had before writing this post. Both the question and the answer are quite old, and in the meantime the Rails Team didn't develop anything that would help us regenerating our views. This probably means <strong>we are not supposed to do it</strong>, don't you think? However, if your goal is to get focused on the backend without having to deal with the frontend, you can always use a gem like <a href="https://github.com/activescaffold/active_scaffold" title="Save time and headaches, and create a more easily maintainable set of pages, with ActiveScaffold. ActiveScaffold handles all your CRUD (create, read, update, delete) user interface needs, leaving you more time to focus on more challenging (and interesting!) problems."><code>ActiveScaffold</code></a>. But you have been warned!
</p>

<p>
  I hope you've found this article useful; thoughts are welcome, as always. If you want you can leave a comment below.
</p>
]]></content>
  </entry>
  
</feed>
